def runSqlScript(scriptPath: String): Unit = {
  // List to store any errors encountered during execution
  val errorMessages = scala.collection.mutable.ListBuffer[String]()

  try {
    // Read the entire script from file
    val script = Source.fromFile(scriptPath).getLines().mkString("\n")

    // Split the script into individual SQL statements (assuming semicolon separates statements)
    val sqlStatements = script.split(";").map(_.trim).filter(_.nonEmpty)

    // Start the connection and statement execution
    val connection = DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPassword)
    val statement = connection.createStatement()

    // Iterate over each SQL statement
    for ((sql, index) <- sqlStatements.zipWithIndex) {
      try {
        println(s"Executing SQL statement #${index + 1}: $sql")  // Log the current SQL statement
        statement.execute(sql)  // Execute the current SQL statement
        println(s"Executed SQL statement #${index + 1}: $sql")
      } catch {
        case e: SQLException =>
          val errorMessage = s"Error executing statement #${index + 1}: $sql\nError: ${e.getMessage}"
          println(errorMessage)
          errorMessages += errorMessage  // Add error message to the list, do not throw yet
      }
    }

    connection.close()  // Close the connection after all statements

    // After all SQL statements are executed, if there were any errors, throw one exception with all error messages
    if (errorMessages.nonEmpty) {
      throw new Exception("SQL script execution failed with the following errors:\n" + errorMessages.mkString("\n"))
    }

  } catch {
    case e: Exception =>
      val errorMessage = s"SQL script execution failed: ${e.getMessage}"
      println(errorMessage)
      throw new Exception(s"SQL execution failed for $scriptPath: $errorMessage")
  }
}
