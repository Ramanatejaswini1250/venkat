// Main logic to process the DataFrame and send email notifications
def processRecords(df: DataFrame): Unit = {
  df.foreachPartition { partition =>
    partition.foreach { row =>
      val alertCode = row.getAs[String]("alert_code")
      val dtCount = row.getAs[Int]("dt_count")
      val dateToLoad = row.getAs[String]("date_to_load")
      val bteqLocation = row.getAs[String]("bteq_location")
      val emailAddresses = row.getAs[String]("email_address")  // Fetching comma-separated email addresses
      val business = row.getAs[String]("business")

      val sourceTableName = row.getAs[String]("source_table_name").getOrElse {
        sendEmailNotification(alertCode, "Missing source_table_name", emailAddresses, business)
        throw new Exception("Missing source_table_name")
      }

      val frequency = row.getAs[String]("frequency").getOrElse {
        sendEmailNotification(alertCode, "Missing frequency", emailAddresses, business)
        throw new Exception("Missing frequency")
      }

      val filterColumn = row.getAs[String]("filter_column").getOrElse {
        sendEmailNotification(alertCode, "Missing filter_column", emailAddresses, business)
        throw new Exception("Missing filter_column")
      }

      try {
        if (dtCount > 0) {
          // Construct the query to count rows in the source table based on the filter
          val jdbcQuery = s"(SELECT COUNT(*) AS cnt FROM $sourceTableName WHERE $filterColumn = '$dateToLoad') AS subquery"
          
          // Perform the query to get the row count
          val sourceTableCountDF = spark.read
            .format("jdbc")
            .option("url", jdbcUrl)
            .option("dbtable", jdbcQuery)
            .option("user", jdbcUser)
            .option("password", jdbcPassword)
            .option("driver", jdbcDriver)
            .load()

          // Extract the count value from the result DataFrame
          val sourceTableCount = sourceTableCountDF.collect()(0).getAs[Long]("cnt")

          // Compare the retrieved count with dtCount
          if (sourceTableCount == dtCount) {
            // Get the SQL folder path based on frequency
            val sqlFolderPath = getSqlFolderPath(frequency, bteqLocation)
            
            // Check if the folder exists
            if (Files.exists(Paths.get(sqlFolderPath))) {
              // Define the path to the SQL file
              val sqlFilePath = s"$sqlFolderPath/${alertCode}.sql"
              
              // Check if the SQL file exists
              if (Files.exists(Paths.get(sqlFilePath))) {
                // Run the SQL script if the file exists
                runSqlScript(sqlFilePath)
                
                // Send a success notification via email to the business
                sendEmailNotification(alertCode, s"SQL script executed successfully for alertCode: $alertCode", emailAddresses, business)
              } else {
                // Handle the case where the SQL file does not exist
                val message = s"SQL file not found for alertCode: $alertCode in $sqlFolderPath"
                sendEmailNotification(alertCode, message, emailAddresses, business)
                println(message)
              }
            } else {
              // Handle the case where the folder does not exist
              val message = s"Folder not found for frequency: $frequency at path: $sqlFolderPath"
              sendEmailNotification(alertCode, message, emailAddresses, business)
              println(message)
            }
          } else {
            // Handle the case where the row counts do not match
            val message = s"Source table count ($sourceTableCount) does not match DT_COUNT ($dtCount) for alertCode: $alertCode"
            sendEmailNotification(alertCode, message, emailAddresses, business)
            println(message)
          }
        } else {
          // Handle the case where dtCount is less than or equal to 0
          val message = s"DT_COUNT is less than or equal to 0 for alertCode: $alertCode"
          sendEmailNotification(alertCode, message, emailAddresses, business)
          throw new Exception(message)
        }
      } catch {
        case ex: Exception =>
          // Handle any exceptions that occur during processing
          val message = s"Error processing alertCode: $alertCode - ${ex.getMessage}"
          sendEmailNotification(alertCode, message, emailAddresses, business)
          println(message)
          ex.printStackTrace()
      }
    }
  }
}
