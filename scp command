import java.io.{BufferedReader, InputStreamReader}

def transferFilesUsingScp(sourcePath: String, targetPath: String): Unit = {
  try {
    // Define the SCP command
    val scpCommand = Seq("scp", "-r", sourcePath, s"user@remote-server:$targetPath") // Update `user@remote-server`

    // Start the process
    val processBuilder = new ProcessBuilder(scpCommand: _*)
    val process = processBuilder.start()

    // Capture the output (if any)
    val reader = new BufferedReader(new InputStreamReader(process.getInputStream))
    var line: String = null
    while ({ line = reader.readLine(); line != null }) {
      println(line)
    }

    // Wait for the process to complete and get the exit code
    val exitCode = process.waitFor()
    if (exitCode == 0) {
      println(s"Files successfully transferred from $sourcePath to $targetPath")
    } else {
      throw new Exception(s"SCP command failed with exit code $exitCode")
    }
  } catch {
    case ex: Exception =>
      println(s"Error during file transfer: ${ex.getMessage}")
      throw new Exception("SCP transfer failed", ex)
  }
}

// Integrate the logic after successful validation
if (masterTableCount == dtCount && masterFileCount == dtCount) {
  println("Validation between masterTable1DF and MasterFile1csvDF successful.")

  // Trigger the SCP command
  val sourcePath = "/disk1/source"
  val targetPath = "/etl/inbound"
  transferFilesUsingScp(sourcePath, targetPath)
} else {
  val message = s"Validation failed: Master table or file counts do not match dt_count."
  sendEmailNotification(alertCode, message, emailAddress, business)
  throw new Exception(message)
}
