import java.io.{BufferedReader, InputStreamReader}

def transferFilesUsingScp(sourcePath: String, targetPath: String, password: String): Unit = {
  try {
    // Define the SCP command with bash for proper interpretation of wildcards
    val scpCommand = Seq(
      "bash", "-c", 
      s"sshpass -p '$password' scp -r $sourcePath user@remote-server:$targetPath"
    )

    // Log the command being executed
    println(s"Executing command: ${scpCommand.mkString(" ")}")

    // Start the process
    val processBuilder = new ProcessBuilder(scpCommand: _*)
    val process = processBuilder.start()

    // Capture and print the standard output
    val outputReader = new BufferedReader(new InputStreamReader(process.getInputStream))
    var line: String = null
    while ({ line = outputReader.readLine(); line != null }) {
      println(s"OUTPUT: $line")
    }

    // Capture and print the error output
    val errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream))
    while ({ line = errorReader.readLine(); line != null }) {
      println(s"ERROR: $line")
    }

    // Wait for the process to complete
    val exitCode = process.waitFor()
    if (exitCode == 0) {
      println(s"Files successfully transferred from $sourcePath to $targetPath")
    } else {
      throw new Exception(s"SCP command failed with exit code $exitCode")
    }
  } catch {
    case ex: Exception =>
      println(s"Error during file transfer: ${ex.getMessage}")
      throw new Exception("SCP transfer failed", ex)
  }
}

// Example usage
val sourcePath = "/disk1/bigdata/dev/source/ramp/_RBSCC_*"
val targetPath = "/etl/inbound"
val password = "your_password"

// Call the transfer function
transferFilesUsingScp(sourcePath, targetPath, password)
