// Method to handle insert statements without column names
def handleInsertWithoutColumns(
    jdbcUrl: String,
    jdbcUser: String,
    jdbcPassword: String,
    jdbcDriver: String,
    tableName: String,
    query: String,
    schema: String
): String = {
  val columns = getColumnsForTable(jdbcUrl, jdbcUser, jdbcPassword, jdbcDriver, tableName, schema)

  if (columns.nonEmpty) {
    val columnList = columns.mkString(", ")
    // Replace the insert statement without columns
    query.replaceFirst(
      s"(?i)INSERT INTO\\s+$tableName\\s+(VALUES|SELECT)",
      s"INSERT INTO $tableName ($columnList) \\1"
    )
  } else {
    println(s"[WARNING] Columns for table '$tableName' could not be fetched. Returning original query.")
    query // Return the original query if column names could not be fetched
  }
}

// Example usage of handleInsertWithoutColumns
def processInsertQueries(script: String, jdbcUrl: String, jdbcUser: String, jdbcPassword: String, jdbcDriver: String, schema: String): String = {
  val insertPattern = """(?i)INSERT INTO\s+([\w.]+)\s*(VALUES|SELECT)""".r

  // Replace all insert statements without columns
  insertPattern.replaceAllIn(script, m => {
    val tableName = m.group(1) // Extract table name
    handleInsertWithoutColumns(jdbcUrl, jdbcUser, jdbcPassword, jdbcDriver, tableName, m.matched, schema)
  })
}
