import java.util.{Calendar, TimeZone}

def getNextExecutionTime(validTimes: List[(Int, Int)]): (Int, Int, Boolean) = {
    val aestZone = TimeZone.getTimeZone("Australia/Sydney")
    val calNow = Calendar.getInstance(aestZone)
    val currentHour = calNow.get(Calendar.HOUR_OF_DAY)
    val currentMin = calNow.get(Calendar.MINUTE)

    val sortedTimes = validTimes.sortBy { case (hour, min) => (hour, min) } // Ensure sorted order

    sortedTimes.find { case (hour, min) =>
        currentHour < hour || (currentHour == hour && currentMin < min)
    } match {
        case Some((nextHour, nextMin)) =>
            (nextHour, nextMin, false) // Execution time is today

        case None =>
            val (firstHour, firstMin) = sortedTimes.head // First execution time for the next day
            (firstHour, firstMin, true) // Indicates it's for the next day
    }
}

def waitForTargetTime(validTimes: List[(Int, Int)]): (Int, Int) = {
    val (targetHour, targetMin, isNextDay) = getNextExecutionTime(validTimes)
    
    val aestZone = TimeZone.getTimeZone("Australia/Sydney")
    val calNow = Calendar.getInstance(aestZone)
    
    val targetCal = Calendar.getInstance(aestZone)
    targetCal.set(Calendar.HOUR_OF_DAY, targetHour)
    targetCal.set(Calendar.MINUTE, targetMin)
    targetCal.set(Calendar.SECOND, 0)
    targetCal.set(Calendar.MILLISECOND, 0)
    
    if (isNextDay) {
        targetCal.add(Calendar.DATE, 1) // Move to next day if required
    }

    val nowMillis = calNow.getTimeInMillis
    val targetMillis = targetCal.getTimeInMillis
    val waitMillis = targetMillis - nowMillis

    if (waitMillis > 0) {
        println(s"‚è≥ Waiting for ${(waitMillis / 1000)} seconds until $targetHour:$targetMin AEST...")
        Thread.sleep(waitMillis)
    }

    println(s"‚úÖ Target time reached: $targetHour:$targetMin AEST")
    (targetHour, targetMin)
}

// Function to send individual alert emails
def sendIndividualEmails(): Unit = {
    println("üì© Sending individual alert emails...")
    // Add logic to send individual emails
}

// Function to send consolidated email
def sendConsolidatedEmail(): Unit = {
    println("üìä Sending consolidated email...")
    // Add logic to send consolidated email
}

// **Define execution times externally (can be modified anytime)**
val executionTimes = List((16, 5), (20, 5)) // 4:05 PM, 8:05 PM

// Main execution logic
val (hour, min) = waitForTargetTime(executionTimes)

if (executionTimes.contains((hour, min))) {
    if (hour == 16 && min == 5) {
        sendIndividualEmails() // 4:05 PM task
    } else if (hour == 20 && min == 5) {
        sendConsolidatedEmail() // 8:05 PM task
    }
}
