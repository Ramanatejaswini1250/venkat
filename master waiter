import org.apache.spark.sql.{SparkSession, DataFrame}
import scala.util.{Try, Success, Failure}

def waitForDataToLoadAndValidate(
  spark: SparkSession,
  alertCode: String,
  countCheckQuery: String,
  jdbcUrl: String,
  jdbcUser: String,
  jdbcPassword: String,
  jdbcDriver: String,
  maxRetries: Int = 10,
  retryInterval: Long = 10000
): (Boolean, Long) = {

  var retries = 0
  var dataLoaded = false
  var dtCount: Long = 0

  // First attempt (before retry loop)
  val queryWithAlertCode = countCheckQuery.replace("$alertCode", s"'$alertCode'")
  try {
    println(s"Executing Query: $queryWithAlertCode")

    val countDF = spark.read
      .format("jdbc")
      .option("url", jdbcUrl)
      .option("dbtable", s"($queryWithAlertCode) AS subquery")
      .option("user", jdbcUser)
      .option("password", jdbcPassword)
      .option("driver", jdbcDriver)
      .load()

    // Get dtCount on first attempt
    dtCount = countDF.agg("count" -> "long").collect().headOption.flatMap(row => Option(row.getLong(0))).getOrElse(0L)

    println(s"First attempt dtCount: $dtCount")

    if (dtCount > 0) {
      println(s"✅ Data has been successfully loaded for alertCode: $alertCode.")
      dataLoaded = true
    } else {
      println(s"❌ Data not available yet for alertCode: $alertCode. Will retry if needed.")
    }

  } catch {
    case e: Exception =>
      println(s"⚠️ Error executing query: ${e.getMessage}")
      e.printStackTrace()
  }

  // If data wasn't loaded on the first attempt, enter retry loop
  while (!dataLoaded && retries < maxRetries) {
    println(s"❌ Retry ${retries + 1} of $maxRetries")
    retries += 1
    Thread.sleep(retryInterval)

    // Re-attempt query execution
    try {
      println(s"Executing Query again: $queryWithAlertCode")

      val countDF = spark.read
        .format("jdbc")
        .option("url", jdbcUrl)
        .option("dbtable", s"($queryWithAlertCode) AS subquery")
        .option("user", jdbcUser)
        .option("password", jdbcPassword)
        .option("driver", jdbcDriver)
        .load()

      // Get dtCount on retry
      dtCount = countDF.agg("count" -> "long").collect().headOption.flatMap(row => Option(row.getLong(0))).getOrElse(0L)

      println(s"Retry dtCount: $dtCount")

      if (dtCount > 0) {
        println(s"✅ Data has been successfully loaded for alertCode: $alertCode.")
        dataLoaded = true
      } else {
        println(s"❌ Data still not available for alertCode: $alertCode. Waiting for next retry.")
      }

    } catch {
      case e: Exception =>
        println(s"⚠️ Error executing query: ${e.getMessage}")
        e.printStackTrace()
    }
  }

  // Final message after retry attempts
  if (!dataLoaded) {
    println(s"⛔ Data for alertCode: $alertCode was NOT loaded after $maxRetries retries.")
  }

  println(s"Final dtCount: $dtCount")
  (dataLoaded, dtCount)
}
