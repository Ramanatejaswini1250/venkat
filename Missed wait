// Extract businessContactsMap dynamically from df2 using select
val businessContactsMap: Map[String, (String, Array[String], String)] = df2
  .select("alert_code", "business", "email_address", "frequency")
  .collect()
  .map(row => {
    val alertCode = row.getString(0) // alert_code
    val business = row.getString(1)  // business
    val emailAddresses = row.getString(2).split(",").map(_.trim).filter(_.nonEmpty) // Split by comma & trim spaces
    val frequency = row.getString(3) // frequency

    alertCode -> (business, emailAddresses, frequency)
  }).toMap


// Send individual missed alerts based on cutoff time dynamically
if (missedAlerts.nonEmpty) {
  missedAlerts.foreach { alertCode =>
    businessContactsMap.get(alertCode) match {
      case Some((business, emailAddresses, frequency)) if frequencyFilter.contains(frequency) =>
        
        // Assign cutoff time dynamically
        val dynamicCutoffTime = frequency match {
          case "D" => "13:00 AEST"  // Daily
          case "W" => "16:00 AEST"  // Weekly
          case "M" => "16:00 AEST"  // Monthly
          case _   => "Unknown Cutoff"
        }

        // Construct email subject and body
        val subject = s"🔴 Missed Alert Notification: $alertCode with Expected Frequency: $frequency"
        val emailBody = s"""
          |The alert <b style="color:red;">$alertCode</b> was scheduled for today but did not arrive.
          |<p>Could you please check and confirm if it is expected?</p>
        """.stripMargin

        // Send email to each recipient in the list
        emailAddresses.foreach { email =>
          sendEmail(email, subject, emailBody, "")
        }

      case None =>
        println(s"Warning: Alert Code $alertCode not found in businessContactsMap")
    }
  }
}



val alertFrequency = processedAlertsWithFrequencyDF
  .filter(col("alert_code") === lit(alertCode)) // Filter for the specific alert
  .select("frequency") // Get the frequency column
  .as[String] // Convert to String
  .headOption.getOrElse("m") // Default to 'm' if not found


val dynamicCutoffTime = alertFrequency match {
  case "d" => "1:05 PM"  // Daily alerts cutoff
  case "w" => "4:05 PM"  // Weekly alerts cutoff
  case "m" => "4:05 PM"  // Monthly alerts cutoff
  case _   => "4:05 PM"  // Default if unknown
}

val emailBody = s"""
  |<html>
  |<body>
  |<p>Dear Team,</p>
  |<p>The alert <b style="color:red;">$alertCode</b> was scheduled for today but did not arrive by the <b>$dynamicCutoffTime AEST</b> cutoff.</p>
  |<p>Could you please check and confirm if this is expected?</p>
  |<br>
  |<p>Best Regards,</p>
  |<p>Your Automation System</p>
  |</body>
  |</html>
""".stripMargin



import java.time.{ZoneId, ZonedDateTime}
import org.apache.spark.sql.functions._

val now = ZonedDateTime.now(ZoneId.of("Australia/Sydney"))
val currentHour = now.getHour

// Define expected cutoff times
val dailyCutoffHour = 13  // 1:00 PM AEST
val weeklyCutoffHour = 16 // 4:00 PM AEST

// Filter expected alerts with different cutoff times
val expectedAlerts = df2
  .filter(col("frequency") === "d" && currentHour >= dailyCutoffHour) // Daily alerts should arrive by 1 PM
  .select("alert_code")
  .distinct()
  .union(
    df2.filter(col("frequency") === "w" && col("run_days_dates") === todayNumber && currentHour >= weeklyCutoffHour) // Weekly alerts should arrive by 4 PM
      .select("alert_code")
      .distinct()
  )
  .union(
    df2.filter(col("frequency") === "m" && col("run_days_dates") === todaydayMonth) // Monthly alerts remain same
      .select("alert_code")
      .distinct()
  )
  .distinct()

val expectedAlertsDF = expectedAlerts.withColumn("alert_code", col("alert_code").cast(StringType))

expectedAlertsDF.show()





// Convert check_datetime from IST to AEST
val processedAlertsDF = alertsArchieveDF
  .withColumn("alert_date", to_date(col("date_to_load"))) // Extract date
  .withColumn("check_datetime", date_format(col("check_datetime"), "HH:mm:ss")) // Extract time
  .withColumn("check_datetime_aest", from_utc_timestamp(col("check_datetime"), "Australia/Sydney"))
  .withColumn("check_datetime_aest", date_format(col("check_datetime_aest"), "HH:mm:ss")) // Extract AEST time
  .filter(col("alert_date") === lit(todayDate)) // Compare with today's date

// Join with df2 to get frequency
val processedAlertsWithFrequencyDF = processedAlertsDF
  .join(df2.select("alert_code", "frequency"), Seq("alert_code"), "left") // Left join to get frequency

// Define cutoff times for different frequencies
val processedBeforeCutoffDF = processedAlertsWithFrequencyDF
  .withColumn("cutoff_time",
    when(col("frequency") === "d", lit("13:05:00")) // Daily cutoff 1:05 PM
    .when(col("frequency") === "w", lit("16:05:00")) // Weekly cutoff 4:05 PM
    .otherwise(lit("16:05:00")) // Default (Monthly) cutoff 4:05 PM
  )
  .filter(col("check_datetime_aest") < col("cutoff_time")) // Filter alerts processed before cutoff


// Extract processed alert codes before cutoff time
val processedBeforeCutoff = processedBeforeCutoffDF
  .select("alert_code")
  .map(_.getString(0))
  .toSet

val combinedReceivedAlerts = receivedAcc.value.toSet ++ processedBeforeCutoff ++ alertsWithIssues




import java.util.{Calendar, TimeZone}

val aestZone = TimeZone.getTimeZone("Australia/Sydney")
val calNow = Calendar.getInstance(aestZone)
val currentHour = calNow.get(Calendar.HOUR_OF_DAY)
val currentMin = calNow.get(Calendar.MINUTE)

def sendMissedAlertsEmail(): Unit = {
    println("📩 Sending missed alerts email at 4:05 PM...")
    // Add logic to send missed alerts email
}

def sendConsolidatedEmail(): Unit = {
    println("📊 Sending consolidated email at 8:05 PM...")
    // Add logic to send consolidated email
}

def waitForTargetTime(targetHour: Int, targetMin: Int): Unit = {
    val targetCal = Calendar.getInstance(aestZone)
    targetCal.set(Calendar.HOUR_OF_DAY, targetHour)
    targetCal.set(Calendar.MINUTE, targetMin)
    targetCal.set(Calendar.SECOND, 0)
    targetCal.set(Calendar.MILLISECOND, 0)

    val nowMillis = System.currentTimeMillis()
    val targetMillis = targetCal.getTimeInMillis

    if (nowMillis < targetMillis) {
        val waitMillis = targetMillis - nowMillis
        println(s"⏳ Waiting for ${(waitMillis / 1000)} seconds until $targetHour:$targetMin AEST...")
        Thread.sleep(waitMillis)
    }
}

// **✅ Handle 4:05 PM missed alerts**
if (currentHour == 16 && currentMin >= 5 && currentMin < 10) {
    sendMissedAlertsEmail() // Process missed alerts immediately
} else if (currentHour == 16 && currentMin < 5) {
    waitForTargetTime(16, 5)
    sendMissedAlertsEmail()
}

// **✅ Handle 8:05 PM consolidated email**
else if (currentHour == 20 && currentMin >= 5 && currentMin < 10) {
    sendConsolidatedEmail() // Send consolidated email immediately
} else if (currentHour == 20 && currentMin < 5) {
    waitForTargetTime(20, 5)
    sendConsolidatedEmail()
}

// **✅ Run normal processing if not 4:05 PM or 8:05 PM**
else {
    println("⚡ Running other tasks as usual...")
    // Add normal data processing logic here
}
