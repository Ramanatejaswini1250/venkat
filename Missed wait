def sendMissedAlertsEmail(frequencyFilter: Set[String]): Unit = {
  // Extract business contacts from df2 safely
  val businessContactsMap: Map[String, (String, Array[String], String)] = df2
    .select("alert_code", "business", "email_address", "frequency")
    .distinct()
    .collect()
    .map { row =>
      val alertCode = row.getString(0)
      val business = row.getString(1)

      val emailAddresses = Option(row.getString(2)) match {
        case Some(email) => email.split(",").map(_.trim).filter(_.nonEmpty)
        case None        => Array.empty[String]
      }

      val frequency = Option(row.getString(3)).getOrElse("Unknown") // Default if null

      (alertCode, (business, emailAddresses, frequency))
    }
    .toMap

  // Debugging: Print businessContactsMap contents
  println("Debug: Business Contacts Map Contents:")
  businessContactsMap.foreach { case (alertCode, (business, emails, frequency)) =>
    println(s"AlertCode: $alertCode, Business: $business, Emails: ${emails.mkString(",")}, Frequency: $frequency")
  }

  // Process missed alerts
  if (missedAlerts.nonEmpty) {
    missedAlerts.foreach { alertCode =>
      businessContactsMap.get(alertCode) match {
        case Some((business, emailAddresses, frequency)) =>
          if (frequencyFilter.contains(frequency.trim.toUpperCase)) {
            val emailList = emailAddresses.mkString(",") // Convert Array to String

            // Assign cutoff time dynamically
