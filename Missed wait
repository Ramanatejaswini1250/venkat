import java.util.{Calendar, TimeZone}

val aestZone = TimeZone.getTimeZone("Australia/Sydney")
val calNow = Calendar.getInstance(aestZone)
val currentHour = calNow.get(Calendar.HOUR_OF_DAY)
val currentMin = calNow.get(Calendar.MINUTE)

def sendMissedAlertsEmail(): Unit = {
    println("📩 Sending missed alerts email at 4:05 PM...")
    // Add logic to send missed alerts email
}

def sendConsolidatedEmail(): Unit = {
    println("📊 Sending consolidated email at 8:05 PM...")
    // Add logic to send consolidated email
}

def waitForTargetTime(targetHour: Int, targetMin: Int): Unit = {
    val targetTimeMillis = Calendar.getInstance(aestZone).apply { c =>
        c.set(Calendar.HOUR_OF_DAY, targetHour)
        c.set(Calendar.MINUTE, targetMin)
        c.set(Calendar.SECOND, 0)
        c.set(Calendar.MILLISECOND, 0)
    }.getTimeInMillis

    val nowMillis = System.currentTimeMillis()

    if (nowMillis < targetTimeMillis) {
        val waitMillis = targetTimeMillis - nowMillis
        println(s"⏳ Waiting for ${(waitMillis / 1000)} seconds until $targetHour:$targetMin AEST...")
        Thread.sleep(waitMillis)
    }
}

// **✅ Handle 4:05 PM missed alerts**
if (currentHour == 16 && currentMin >= 5 && currentMin < 10) {
    sendMissedAlertsEmail() // Process missed alerts immediately
} else if (currentHour == 16 && currentMin < 5) {
    waitForTargetTime(16, 5)
    sendMissedAlertsEmail()
}

// **✅ Handle 8:05 PM consolidated email**
else if (currentHour == 20 && currentMin >= 5 && currentMin < 10) {
    sendConsolidatedEmail() // Send consolidated email immediately
} else if (currentHour == 20 && currentMin < 5) {
    waitForTargetTime(20, 5)
    sendConsolidatedEmail()
}

// **✅ Run normal processing if not 4:05 PM or 8:05 PM**
else {
    println("⚡ Running other tasks as usual...")
    // Add normal data processing logic here
}
