import org.apache.spark.sql.{SparkSession, DataFrame}
import java.io.{BufferedReader, InputStreamReader}
import javax.mail._
import javax.mail.internet._
import java.util.Properties
import java.text.{SimpleDateFormat}
import java.util.{Calendar}
import scala.util.{Try, Success, Failure}
import java.nio.file.{Files, Paths}

object EmailNotificationApp {
  
  // Define Spark session (initialize the Spark context)
  val spark: SparkSession = SparkSession.builder()
    .appName("EmailNotificationApp")
    .master("local[*]") // Adjust as needed for your environment
    .getOrCreate()

  // JDBC connection parameters (to be set with actual values)
  val jdbcUrl: String = "jdbc:your_database_url"
  val jdbcUser: String = "your_user"
  val jdbcPassword: String = "your_password"
  val jdbcDriver: String = "com.jdbc.Driver"  // Specify the correct JDBC driver class

  // Function to send email notifications
  def sendEmailNotification(alertCode: String, message: String, emailAddresses: String, business: String): Unit = {
    val smtpServer = "smtp.yourmailserver.com"  // Replace with your SMTP server
    val smtpPort = "587"                        // Port for TLS
    val smtpUser = "your_email@example.com"     // Replace with your SMTP username
    val smtpPassword = sys.env("SMTP_PASSWORD_ENV_VAR")  // Use environment variable for security

    val emailList = emailAddresses.split(",").map(_.trim)
    if (emailList.nonEmpty) {
      val toEmail = emailList(0)
      val ccEmails = emailList.drop(1).mkString(",")  // All remaining emails in "CC"

      // Set properties for the mail session
      val properties = new Properties()
      properties.put("mail.smtp.host", smtpServer)
      properties.put("mail.smtp.port", smtpPort)
      properties.put("mail.smtp.auth", "true")
      properties.put("mail.smtp.starttls.enable", "true")

      // Create an authenticator for the SMTP server
      val authenticator = new Authenticator() {
        override def getPasswordAuthentication: PasswordAuthentication = {
          new PasswordAuthentication(smtpUser, smtpPassword)
        }
      }

      // Create the mail session
      val session = Session.getInstance(properties, authenticator)

      try {
        // Create a MimeMessage object
        val mimeMessage = new MimeMessage(session)
        mimeMessage.setFrom(new InternetAddress(smtpUser))
        mimeMessage.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail))
        if (ccEmails.nonEmpty) {
          mimeMessage.setRecipients(Message.RecipientType.CC, InternetAddress.parse(ccEmails))
        }
        mimeMessage.setSubject(s"Alert: $alertCode - $business")
        mimeMessage.setText(s"Message: $message\n\nBusiness: $business")

        // Send the email
        Transport.send(mimeMessage)
        println(s"Email notification sent to: $toEmail and CC: $ccEmails for alertCode: $alertCode with message: $message")
      } catch {
        case ex: MessagingException =>
          println(s"Failed to send email notification: ${ex.getMessage}")
      }
    } else {
      println("No email addresses found to send the notification.")
    }
  }

// Method to handle insert statements without column names
  def handleInsertWithoutColumns(jdbcUrl: String, jdbcUser: String, jdbcPassword: String, jdbcDriver: String, tableName: String, query: String): String = {
    // Get the table columns dynamically
    val columns = getTableColumns(jdbcUrl, jdbcUser, jdbcPassword, jdbcDriver, tableName)
    val columnsString = columns.mkString(", ")
    val queryWithColumns = query.replace("insert into", s"insert into $tableName ($columnsString)")

    queryWithColumns
  }
}

object SqlScriptExecutor {

  // Generate a timestamped log file name
  def getCurrentTimestamp: String = {
    val format = new java.text.SimpleDateFormat("yyyyMMddHHmmss")
    format.format(java.util.Calendar.getInstance().getTime)
  }

  // Function to remove block comments (/* ... */)
  def removeBlockComments(script: String): String = {
    val blockCommentPattern = """(?s)/\*.*?\*/""".r
    blockCommentPattern.replaceAllIn(script, "") // Remove block comments
  }

  // Function to handle inline comments (--) while preserving SQL before them
  def removeInlineComments(line: String): String = {
    val singleLineCommentPattern = """--.*""".r
    singleLineCommentPattern.replaceFirstIn(line, "").trim // Remove only the comment part
  }

  // Function to delete log files older than 24 hours
  def cleanOldLogFiles(logDirectory: String): Unit = {
    println(s"Cleaning up old log files from: $logDirectory")

    val logFiles = Files.list(Paths.get(logDirectory)).iterator().asScala
    val currentTime = System.currentTimeMillis()

    logFiles.foreach { logFile =>
      try {
        val fileTime: FileTime = Files.getLastModifiedTime(logFile)
        val fileAge = currentTime - fileTime.toMillis

        // Check if file is older than 24 hours (24 hours * 60 minutes * 60 seconds * 1000 ms)
        if (fileAge > TimeUnit.HOURS.toMillis(24)) {
          println(s"Deleting old log file: ${logFile.getFileName}")
          Files.delete(logFile) // Delete the log file
        }
      } catch {
        case e: IOException => println(s"Error checking file $logFile: ${e.getMessage}")
      }
    }
  }

  // Execute the SQL script
  def runSqlScript(scriptPath: String, jdbcUrl: String, jdbcUser: String, jdbcPassword: String, jdbcDriver: String): Unit = {
    println(s"Running SQL script from: $scriptPath")
    val logPath = s"sql_execution_log_${getCurrentTimestamp}.txt"
    val logBuffer = new StringBuilder

    try {
      // Register JDBC driver
      println("Registering JDBC driver...")
      Class.forName(jdbcDriver)

      // Establish connection
      println(s"Connecting to database at: $jdbcUrl")
      val connection = java.sql.DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPassword)
      val statement = connection.createStatement()

      // Read the SQL script
      println("Reading SQL script...")
      val script = java.nio.file.Files.readString(java.nio.file.Paths.get(scriptPath), java.nio.charset.StandardCharsets.UTF_8)

      // Process the script: remove block comments and split into lines
      val scriptWithoutComments = removeBlockComments(script)
      val lines = scriptWithoutComments.split("\n").toSeq

      // Prepare and filter valid lines
      val validLines = lines
        .drop(4) // Skip the first 4 lines
        .dropRight(3) // Skip the last 3 lines
        .map(removeInlineComments) // Remove inline comments (-- ...)
        .filter(_.nonEmpty) // Remove empty or whitespace-only lines

      // Combine valid lines into SQL commands and execute them
      val commands = validLines.mkString("\n").split(";").map(_.trim).filter(_.nonEmpty)

      commands.foreach { command =>
        try {
          // Check if the command is an insert without columns
          if (command.toLowerCase.startsWith("insert into")) {
            val tableName = command.split(" ")(2) // Extract table name from the insert statement
            val commandWithColumns = SqlUtils.handleInsertWithoutColumns(jdbcUrl, jdbcUser, jdbcPassword, jdbcDriver, tableName, command)
            println(s"Executing command: $commandWithColumns")
            statement.execute(commandWithColumns)
            val successMsg = s"[SUCCESS] Executed: $commandWithColumns"
            println(successMsg)
            logBuffer.append(successMsg + "\n")
          } else {
            println(s"Executing command: $command")
            statement.execute(command)
            val successMsg = s"[SUCCESS] Executed: $command"
            println(successMsg)
            logBuffer.append(successMsg + "\n")
          }
        } catch {
          case ex: Exception =>
            val errorMsg = s"[ERROR] Failed to execute: $command\nMessage: ${ex.getMessage}"
            println(errorMsg)
            logBuffer.append(errorMsg + "\n")
        }
      }

      // Save execution log to a file
      println(s"Execution log saved to: $logPath")
      java.nio.file.Files.write(java.nio.file.Paths.get(logPath), logBuffer.toString().getBytes(java.nio.charset.StandardCharsets.UTF_8))

      // Close resources
      statement.close()
      connection.close()
    } catch {
      case ex: Exception =>
        val fatalErrorMsg = s"[FATAL] Error: ${ex.getMessage}"
        println(fatalErrorMsg)
        logBuffer.append(fatalErrorMsg + "\n")
        java.nio.file.Files.write(java.nio.file.Paths.get(logPath), logBuffer.toString().getBytes(java.nio.charset.StandardCharsets.UTF_8))
    }

    // Clean old log files after execution
    cleanOldLogFiles("path/to/logs") // Specify your log directory path
  }


  // Function to generate a timestamped file name
  def getCurrentTimestamp: String = {
    val format = new SimpleDateFormat("yyyyMMddHHmmss")
    format.format(Calendar.getInstance().getTime)
  }

  def validateData(masterDF: DataFrame, fileDF: DataFrame): Boolean = {
    val sortedMasterDF = masterDF.orderBy(masterDF.columns.map(col): _*)
    val sortedFileDF = fileDF.orderBy(fileDF.columns.map(col): _*)
    sortedMasterDF.except(sortedFileDF).isEmpty && sortedFileDF.except(sortedMasterDF).isEmpty
  }

  df.collect().foreach { row =>
        val alertCode = row.getAs[String]("alert_code")
        val dtCount = row.getAs[Int]("dt_count")
        val dateToLoad = row.getAs[String]("date_to_load")
        val bteqLocation = row.getAs[String]("bteq_location")
        val emailAddress = row.getAs[String]("email_address")
        val business = row.getAs[String]("business")

        val sourceTableName = row.getAs[String]("source_table_name").getOrElse {
          sendEmailNotification(alertCode, "Missing source_table_name", emailAddress, business)
          throw new Exception("Missing source_table_name")
        }

        val frequency = row.getAs[String]("frequency").getOrElse {
          sendEmailNotification(alertCode, "Missing frequency", emailAddress, business)
          throw new Exception("Missing frequency")
        }

        val filterColumn = row.getAs[String]("filter_column").getOrElse {
          sendEmailNotification(alertCode, "Missing filter_column", emailAddress, business)
          throw new Exception("Missing filter_column")
        }

        try {
          if (dtCount > 0) {
            val jdbcQuery = s"(SELECT COUNT(*) AS cnt FROM $sourceTableName WHERE $filterColumn = '$dateToLoad') AS subquery"
            
            val sourceTableCountDF = spark.read
              .format("jdbc")
              .option("url", jdbcUrl)
              .option("dbtable", jdbcQuery)
              .option("user", jdbcUser)
              .option("password", jdbcPassword)
              .option("driver", jdbcDriver)
              .load()

            val sourceTableCount = sourceTableCountDF.collect()(0).getAs[Long]("cnt")

            if (sourceTableCount == dtCount) {
              val sqlFolderPath = "/path/to/sql/folder" // Modify as needed
              if (Files.exists(Paths.get(sqlFolderPath))) {
                val sqlFilePath = s"$sqlFolderPath/${alertCode}.sql"
                
                if (Files.exists(Paths.get(sqlFilePath))) {
                  runSqlScript(sqlFilePath)
                  sendEmailNotification(alertCode, "SQL script executed successfully", emailAddress, business)
                } else {
                  val message = s"SQL file not found for alertCode: $alertCode"
                  sendEmailNotification(alertCode, message, emailAddress, business)
                  println(message)
                }
              } else {
                val message = s"Folder not found for frequency: $frequency at path: $sqlFolderPath"
                sendEmailNotification(alertCode, message, emailAddress, business)
                println(message)
              }
            } else {
              val message = s"Source table count does not match DT_COUNT"
              sendEmailNotification(alertCode, message, emailAddress, business)
              println(message)
            }
          } else {
            val message = s"DT_COUNT is less than or equal to 0 for alertCode: $alertCode"
            sendEmailNotification(alertCode, message, emailAddress, business)
            throw new Exception(message)
          }
        } catch {
          case ex: Exception =>
            val message = s"Error processing alertCode: $alertCode - ${ex.getMessage}"
            sendEmailNotification(alertCode, message, emailAddress, business)
            println(message)
            ex.printStackTrace()
        }
      }
    }
  }

  // Entry point for the Spark job
  def main(args: Array[String]): Unit = {
    // Simulate a DataFrame as an example (replace with actual DataFrame loading)
    val data = Seq(
      ("A001", 10, "2024-12-16", "/path/to/sql", Some("source_table"), Some("daily"), Some("filter_column")),
      ("A002", 5, "2024-12-17", "/path/to/sql", Some("source_table"), Some("hourly"), Some("filter_column"))
    )

    import spark.implicits._
    val df = data.toDF("alert_code", "dt_count", "date_to_load", "bteq_location", "source_table_name", "frequency", "filter_column")

    // Process the records and send notifications
    processRecords(df)

    // Stop the Spark session
    spark.stop()
  }
}
