import org.apache.spark.sql.{SparkSession, DataFrame}
import scala.util.{Try, Success, Failure}
import java.nio.file.{Files, Paths}
import java.text.SimpleDateFormat
import java.util.{Calendar, Properties}
import java.io.FileInputStream
import java.sql.{Connection, DriverManager, Driver}

object EmailNotificationApp {

  // Initialize Spark session
  val spark: SparkSession = SparkSession.builder()
    .appName("EmailNotificationApp")
    .master("local[*]") // Adjust for your environment
    .getOrCreate()

  // Load properties from file
  def loadProperties(filePath: String): Properties = {
    val properties = new Properties()
    Try {
      val inputStream = new FileInputStream(filePath)
      properties.load(inputStream)
      inputStream.close()
    } match {
      case Success(_) => println(s"Properties loaded from $filePath")
      case Failure(ex) => 
        println(s"Failed to load properties: ${ex.getMessage}")
        throw ex
    }
    properties
  }

  // Explicitly register a driver at runtime
  def registerDriver(driverClassName: String): Unit = {
    Try {
      val driverClass = Class.forName(driverClassName)
      val driver = driverClass.getDeclaredConstructor().newInstance().asInstanceOf[Driver]
      DriverManager.registerDriver(driver)
    } match {
      case Success(_) => println(s"Driver $driverClassName successfully registered.")
      case Failure(ex) => println(s"Failed to register driver $driverClassName: ${ex.getMessage}")
    }
  }

  // Get a connection using the properties
  def getConnection(properties: Properties): Connection = {
    val jdbcUrl = properties.getProperty("jdbc.url")
    val jdbcUser = properties.getProperty("jdbc.user")
    val jdbcPassword = properties.getProperty("jdbc.password")
    val driverClassName = properties.getProperty("jdbc.driver")

    // Register the driver before using it
    registerDriver(driverClassName)

    // Get connection
    DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPassword)
  }

  // Function to run SQL scripts
  def runSqlScript(scriptPath: String, properties: Properties): Unit = {
    println(s"Running SQL script from: $scriptPath")
    val logPath = s"sql_execution_log_${getCurrentTimestamp}.txt"
    val logBuffer = new StringBuilder

    Try {
      val connection = getConnection(properties)
      val statement = connection.createStatement()

      val script = new String(Files.readAllBytes(Paths.get(scriptPath)))
      val commands = script.split(";").map(_.trim).filter(_.nonEmpty)

      commands.foreach { command =>
        try {
          statement.execute(command)
          val successMsg = s"[SUCCESS] Executed: $command"
          println(successMsg)
          logBuffer.append(successMsg).append("\n")
        } catch {
          case ex: Exception =>
            val errorMsg = s"[ERROR] Failed: $command\nMessage: ${ex.getMessage}"
            println(errorMsg)
            logBuffer.append(errorMsg).append("\n")
        }
      }

      statement.close()
      connection.close()

      // Save execution log
      Files.write(Paths.get(logPath), logBuffer.toString().getBytes())
      println(s"Execution log saved to: $logPath")
    } catch {
      case ex: Exception =>
        val errorMsg = s"[FATAL] Error: ${ex.getMessage}"
        println(errorMsg)
        logBuffer.append(errorMsg).append("\n")
        Files.write(Paths.get(logPath), logBuffer.toString().getBytes())
    }
  }

  // Utility function to get the current timestamp
  def getCurrentTimestamp: String = {
    val format = new SimpleDateFormat("yyyyMMddHHmmss")
    format.format(Calendar.getInstance().getTime)
  }

  def main(args: Array[String]): Unit = {
    // Load properties file
    val propertiesFilePath = "/path/to/db.properties"
    val properties = loadProperties(propertiesFilePath)

    // Example usage of `runSqlScript`
    val sqlFilePath = "/path/to/your/sql/script.sql"
    runSqlScript(sqlFilePath, properties)
  }
}
