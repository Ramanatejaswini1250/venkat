import org.apache.hadoop.fs.{FileSystem, Path}
import org.apache.hadoop.conf.Configuration
import java.io.{BufferedWriter, OutputStreamWriter, BufferedReader, InputStreamReader}

val conf = new Configuration()
val fs = FileSystem.get(conf)

// Path to your CSV file
val csvPath1 = new Path("/output/path/master1.csv")

// Function to check if the file has a header
def fileHasHeader(filePath: Path, expectedHeader: String): Boolean = {
  if (!fs.exists(filePath)) return false  // File does not exist, so no header
  val reader = new BufferedReader(new InputStreamReader(fs.open(filePath), "UTF-8"))
  val firstLine = reader.readLine()
  reader.close()
  firstLine == expectedHeader  // Check if the first line matches the expected header
}

// Define the header
val header = "alert_id,Alert-code"

// Check if the file already has the header
val headerPresent = fileHasHeader(csvPath1, header)

// Open the file in append mode if it exists, otherwise create a new file
val outputStream = if (fs.exists(csvPath1)) {
  fs.append(csvPath1)  // Append to the existing file
} else {
  fs.create(csvPath1)  // Create a new file
}

// Create a BufferedWriter using the correct OutputStreamWriter constructor
val writer = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"))

// Write the header only if it's not already present
if (!headerPresent) {
  writer.write(header)
  writer.newLine()
}

// Example alert data
val alertData1 = List("1,DC0019", "2,DC0019")
val alertData2 = List("3,RA0387", "4,RA0387")

// Append data for each alert to the file
(alertData1 ++ alertData2).foreach { data =>
  writer.write(data)
  writer.newLine()
}

// Close the writer after all data is written
writer.close()
println(s"Data written to $csvPath1")
