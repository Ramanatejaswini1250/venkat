import java.nio.file.{Files, Paths}
import java.nio.charset.StandardCharsets
import java.sql.{Connection, DriverManager}
import scala.util.Try

object SqlScriptExecutor {

  // Fetch column names using "SHOW COLUMNS"
  def getTableColumns(
      jdbcUrl: String,
      jdbcUser: String,
      jdbcPassword: String,
      jdbcDriver: String,
      tableName: String
  ): Seq[String] = {
    Class.forName(jdbcDriver)
    var connection: Connection = null

    try {
      connection = DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPassword)
      val statement = connection.createStatement()

      val tableNameOnly = tableName.split("\\.").last // Support fully qualified names
      val query = s"SHOW COLUMNS FROM $tableNameOnly"
      val resultSet = statement.executeQuery(query)

      val columns = Iterator
        .continually(resultSet)
        .takeWhile(_.next())
        .map(_.getString(1)) // Column names are typically in the first column
        .toSeq

      if (columns.isEmpty) throw new Exception(s"No columns found for table: $tableName")
      columns
    } catch {
      case ex: Exception =>
        throw new Exception(s"Error fetching columns for table $tableName: ${ex.getMessage}", ex)
    } finally {
      if (connection != null) connection.close()
    }
  }

  // Handle INSERT statements without column names
  def handleInsertWithoutColumns(
      jdbcUrl: String,
      jdbcUser: String,
      jdbcPassword: String,
      jdbcDriver: String,
      tableName: String,
      query: String
  ): String = {
    val columns = getTableColumns(jdbcUrl, jdbcUser, jdbcPassword, jdbcDriver, tableName)

    if (columns.isEmpty)
      throw new Exception(s"No columns found for table: $tableName")

    val columnsString = columns.map(col => s"`$col`").mkString(", ")

    val updatedQuery = query.replaceFirst(
      "(?i)(INSERT INTO\\s+\\w+(\\.\\w+)?)",
      s"INSERT INTO $tableName ($columnsString)"
    )

    updatedQuery
  }

  // Execute a SQL script using JDBC
  def runSqlScript(
      scriptPath: String,
      jdbcUrl: String,
      jdbcUser: String,
      jdbcPassword: String,
      jdbcDriver: String,
      tableNames: Seq[String]
  ): Unit = {
    println(s"Running SQL script from: $scriptPath")
    val logPath = s"sql_execution_log_${System.currentTimeMillis}.txt"
    val logBuffer = new StringBuilder

    Class.forName(jdbcDriver)

    try {
      val connection = DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPassword)
      val statement = connection.createStatement()

      val script = Files.readString(Paths.get(scriptPath), StandardCharsets.UTF_8)
      val commands = script.split(";").map(_.trim).filter(_.nonEmpty)

      commands.foreach { command =>
        try {
          // Check if the command starts with INSERT INTO and matches any table name
          val tableNameOpt = tableNames.find(tableName => command.toLowerCase.startsWith(s"insert into $tableName"))

          val processedCommand = tableNameOpt match {
            case Some(tableName) =>
              handleInsertWithoutColumns(jdbcUrl, jdbcUser, jdbcPassword, jdbcDriver, tableName, command)
            case None => command // For other commands, use as-is
          }

          println(s"Executing: $processedCommand")
          statement.execute(processedCommand)

          val successMsg = s"[SUCCESS] Executed: $command"
          println(successMsg)
          logBuffer.append(successMsg + "\n")
        } catch {
          case ex: Exception =>
            val errorMsg = s"[ERROR] Failed to execute command: $command\nReason: ${ex.getMessage}"
            println(errorMsg)
            logBuffer.append(errorMsg + "\n")
        }
      }

      Files.write(Paths.get(logPath), logBuffer.toString().getBytes(StandardCharsets.UTF_8))
      println(s"Execution log saved to: $logPath")
      connection.close()
    } catch {
      case ex: Exception =>
        val fatalErrorMsg = s"[FATAL] Error: ${ex.getMessage}"
        println(fatalErrorMsg)
        logBuffer.append(fatalErrorMsg + "\n")
    }
  }

  // Main entry point
  def main(args: Array[String]): Unit = {
    val scriptPath = "path/to/your/sqlfile.sql"
    val jdbcUrl = "jdbc:your_database_url"
    val jdbcUser = "your_database_username"
    val jdbcPassword = "your_database_password"
    val jdbcDriver = "your.jdbc.Driver"

    val tableNames = Seq("table1", "table2", "table3") // Add all your table names here

    runSqlScript(scriptPath, jdbcUrl, jdbcUser, jdbcPassword, jdbcDriver, tableNames)
  }
}
