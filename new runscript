import scala.util.matching.Regex

def extractTableName(sql: String): Option[String] = {
  // Regular expressions for different SQL operations (SELECT, INSERT, UPDATE, DELETE)
  val selectPattern: Regex = "(?i)from\\s+([a-zA-Z0-9_]+)".r   // for SELECT queries
  val insertPattern: Regex = "(?i)insert\\s+into\\s+([a-zA-Z0-9_]+)".r   // for INSERT queries
  val updatePattern: Regex = "(?i)update\\s+([a-zA-Z0-9_]+)".r   // for UPDATE queries
  val deletePattern: Regex = "(?i)delete\\s+from\\s+([a-zA-Z0-9_]+)".r   // for DELETE queries
  
  // Try to match the patterns and extract table name
  sql match {
    case selectPattern(tableName) => Some(tableName)
    case insertPattern(tableName) => Some(tableName)
    case updatePattern(tableName) => Some(tableName)
    case deletePattern(tableName) => Some(tableName)
    case _ => None // Return None if no table name is found
  }
}

def sendEmailNotification(alertCode: String, message: String, failedSql: String, emailAddress: String, business: String): Unit = {
  val tableName = extractTableName(failedSql).getOrElse("Unknown Table")

  val detailedMessage = s"$message\n\nFailed SQL: $failedSql\nTable Name: $tableName"
  
  // Implement your email sending logic here
  println(s"Sending email to $emailAddress with alert code $alertCode: $detailedMessage")
}

def generateAlertCode(sql: String): String = {
  // Example: Generate an alert code based on the SQL operation type
  if (sql.toLowerCase.startsWith("insert into")) {
    "INSERT_ALERT"
  } else if (sql.toLowerCase.startsWith("update")) {
    "UPDATE_ALERT"
  } else if (sql.toLowerCase.startsWith("select")) {
    "SELECT_ALERT"
  } else {
    "GENERAL_ALERT"
  }
}

try {
  sqlStatements.foreach { sql =>
    try {
      // Execute the SQL statement
      println(s"Executing SQL: $sql")
      stmt_rss.execute(sql)
      conn_rss.commit()

    } catch {
      case ex: Exception =>
        // Capture the failed SQL and generate the alert code
        val alertCode = generateAlertCode(sql)
        val message = s"SQL execution failed for statement. Error: ${ex.getMessage}"
        // Send email with failed SQL statement and extracted table name
        sendEmailNotification(alertCode, message, sql, "email@example.com", "BusinessName")
        println(s"Error executing SQL: $sql\nError: ${ex.getMessage}")
    }
  }
} catch {
  case ex: Exception =>
    val message = s"Failed to execute SQL statements: ${ex.getMessage}"
    val alertCode = "GENERAL_EXECUTION_ALERT"
    // Send email with the general error message
    sendEmailNotification(alertCode, message, "N/A", "email@example.com", "BusinessName")
} finally {
  // Ensure resources are closed
  if (stmt_rss != null) stmt_rss.close()
  if (conn_rss != null) conn_rss.close()
}
