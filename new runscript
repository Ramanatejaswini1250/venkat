import java.sql.{Connection, DriverManager, Statement}
import java.nio.file.{Files, Paths}
import java.nio.charset.StandardCharsets
import scala.util.{Try, Using}

def runSqlScript(
    scriptPath: String,
    jdbcUrl: String,
    jdbcUser: String,
    jdbcPassword: String,
    jdbcDriver: String
): Unit = {
  
  println(s"Running SQL script from: $scriptPath")
  val logBuffer = new StringBuilder

  // Load SQL script content
  val scriptContent = Try(new String(Files.readAllBytes(Paths.get(scriptPath)), StandardCharsets.UTF_8)).getOrElse {
    println(s"[ERROR] Failed to read SQL script: $scriptPath")
    return
  }

  // Remove block comments
  val scriptWithoutComments = removeBlockComments(scriptContent)
  val lines = scriptWithoutComments.split("\n").toSeq

  // Prepare valid SQL lines
  val validLines = lines
    .drop(4) // Skip first 4 lines
    .dropRight(3) // Skip last 3 lines
    .map(removeInlineComments)
    .filter(_.nonEmpty)

  // Check if DELETE statements exist in the script
  val deleteStatements = List(
    "DELETE FROM master1_test",
    "DELETE FROM master2_test"
  )

  val missingDeletes = deleteStatements.filterNot { deleteStmt =>
    validLines.exists(_.toUpperCase.contains(deleteStmt))
  }

  // Add missing DELETE statements at the beginning of the script
  if (missingDeletes.nonEmpty) {
    println(s"[INFO] Adding missing DELETE statements: ${missingDeletes.mkString(", ")}")
    validLines.prependAll(missingDeletes) // Add missing DELETE statements at the beginning
  }

  val commands = validLines.mkString("\n").split(";").map(_.trim).filter(_.nonEmpty)

  if (commands.isEmpty) {
    println("[WARNING] No valid SQL commands found to execute.")
    return
  }

  // Register JDBC driver and establish a connection
  Try(Class.forName(jdbcDriver)).getOrElse {
    println(s"[ERROR] JDBC Driver not found: $jdbcDriver")
    return
  }

  Using.Manager { use =>
    val connection = use(DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPassword))
    connection.setAutoCommit(false) // Disable auto-commit for transactional consistency
    val statement = use(connection.createStatement())

    commands.foreach { command =>
      try {
        println(s"Executing SQL: $command")
        statement.execute(command)
      } catch {
        case ex: Exception =>
          val tableName = extractTableName(command)
          val errorMsg = s"[ERROR] Failed to execute SQL on table: $tableName\nMessage: ${ex.getMessage}"
          println(errorMsg)
          logBuffer.append(errorMsg).append("\n")

          // Send email alert
          sendEmailNotification("SQL_EXECUTION_ERROR", errorMsg, "email@example.com", "BusinessName")
      }
    }

    // Commit only if all queries succeed
    connection.commit()
    println("âœ… SQL script executed successfully.")

  }.recover {
    case ex: Exception =>
      val errorMsg = s"[CRITICAL ERROR] Script execution failed: ${ex.getMessage}"
      println(errorMsg)
      logBuffer.append(errorMsg).append("\n")
      sendEmailNotification("SCRIPT_FAILURE", errorMsg, "email@example.com", "BusinessName")
  }
}
