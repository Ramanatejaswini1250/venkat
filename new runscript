import java.io.{BufferedReader, FileReader}
import java.sql.{Connection, DriverManager, Statement}
import java.nio.file.{Files, Paths}
import java.nio.charset.StandardCharsets
import java.text.SimpleDateFormat
import java.util.Calendar
import scala.jdk.CollectionConverters._

object SqlScriptExecutor {
  // Generate a timestamped log file name
  def getCurrentTimestamp: String = {
    val format = new SimpleDateFormat("yyyyMMddHHmmss")
    format.format(Calendar.getInstance().getTime)
  }

  // Remove block comments (/* ... */) and inline block comments
  def removeBlockComments(script: String): String = {
    val blockCommentPattern = """(?s)/\*.*?\*/""".r
    blockCommentPattern.replaceAllIn(script, "") // Remove block comments
  }

  // Handle single-line comments (--) while preserving SQL before them
  def removeInlineComments(line: String): String = {
    val singleLineCommentPattern = """--.*""".r
    singleLineCommentPattern.replaceFirstIn(line, "").trim // Remove only the comment part
  }

  // Execute the SQL script
  def runSqlScript(scriptPath: String, jdbcUrl: String, jdbcUser: String, jdbcPassword: String, jdbcDriver: String): Unit = {
    println(s"Running SQL script from: $scriptPath")
    val logPath = s"sql_execution_log_${getCurrentTimestamp}.txt"
    val logBuffer = new StringBuilder

    try {
      // Register JDBC driver
      println("Registering JDBC driver...")
      Class.forName(jdbcDriver)

      // Establish connection
      println(s"Connecting to database at: $jdbcUrl")
      val connection: Connection = DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPassword)
      val statement: Statement = connection.createStatement()

      // Read the SQL script
      println("Reading SQL script...")
      val script = Files.readString(Paths.get(scriptPath), StandardCharsets.UTF_8)

      // Process the script: remove block comments and split into lines
      val scriptWithoutComments = removeBlockComments(script)
      val lines = scriptWithoutComments.split("\n").toSeq

      // Prepare and filter valid lines
      val validLines = lines
        .drop(4) // Skip the first 4 lines
        .dropRight(3) // Skip the last 3 lines
        .map(removeInlineComments) // Remove inline comments (-- ...)
        .filter(_.nonEmpty) // Remove empty or whitespace-only lines

      println("Filtered lines to execute:")
      validLines.foreach(println)

      // Combine valid lines into SQL commands and execute them
      val commands = validLines.mkString("\n").split(";").map(_.trim).filter(_.nonEmpty)

      commands.foreach { command =>
        try {
          println(s"Executing command: $command")
          statement.execute(command)
          val successMsg = s"[SUCCESS] Executed: $command"
          println(successMsg)
          logBuffer.append(successMsg + "\n")
        } catch {
          case ex: Exception =>
            val errorMsg = s"[ERROR] Failed to execute: $command\nMessage: ${ex.getMessage}"
            println(errorMsg)
            logBuffer.append(errorMsg + "\n")
        }
      }

      // Save execution log to a file
      println(s"Execution log saved to: $logPath")
      Files.write(Paths.get(logPath), logBuffer.toString().getBytes(StandardCharsets.UTF_8))

      // Close resources
      statement.close()
      connection.close()
    } catch {
      case ex: Exception =>
        val fatalErrorMsg = s"[FATAL] Error: ${ex.getMessage}"
        println(fatalErrorMsg)
        logBuffer.append(fatalErrorMsg + "\n")
        Files.write(Paths.get(logPath), logBuffer.toString().getBytes(StandardCharsets.UTF_8))
    }
  }

  // Main entry point
  def main(args: Array[String]): Unit = {
    val scriptPath = "path/to/your/sqlfile.sql"
    val jdbcUrl = "jdbc:your_database_url"
    val jdbcUser = "your_database_username"
    val jdbcPassword = "your_database_password"
    val jdbcDriver = "your.jdbc.Driver"

    runSqlScript(scriptPath, jdbcUrl, jdbcUser, jdbcPassword, jdbcDriver)
  }
}
