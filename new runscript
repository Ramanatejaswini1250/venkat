import java.io.{BufferedReader, FileReader}
import java.sql.{Connection, DriverManager, Statement}
import java.text.SimpleDateFormat
import java.util.Calendar
import java.nio.file.{Files, Paths}
import java.nio.charset.StandardCharsets

// Function to generate a timestamped file name
def getCurrentTimestamp: String = {
  val format = new SimpleDateFormat("yyyyMMddHHmmss")
  format.format(Calendar.getInstance().getTime)
}

def runSqlScript(scriptPath: String, jdbcUrl: String, jdbcUser: String, jdbcPassword: String, jdbcDriver: String): Unit = {
  println(s"Running SQL script from: $scriptPath")
  val logPath = s"sql_execution_log_${getCurrentTimestamp}.txt" // Log file to save execution details
  val logBuffer = new StringBuilder

  // Register the JDBC driver
  try {
    Class.forName(jdbcDriver)
  } catch {
    case ex: Exception =>
      println(s"Error loading JDBC driver: ${ex.getMessage}")
      return
  }

  // Establish a connection
  var connection: Connection = null
  var statement: Statement = null
  var reader: BufferedReader = null

  try {
    connection = DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPassword)
    statement = connection.createStatement()

    // Read the SQL script line by line
    reader = new BufferedReader(new FileReader(scriptPath))

    // Skip the first four lines
    for (_ <- 1 to 4) {
      reader.readLine()
    }

    var line: String = reader.readLine()
    val commandBuffer = new StringBuilder
    var lineNumber = 5 // Start line numbering from the fifth line

    while (line != null) {
      val trimmedLine = line.trim

      // Skip empty lines and comments
      if (trimmedLine.nonEmpty && !trimmedLine.startsWith("--")) {
        commandBuffer.append(trimmedLine).append(" ")

        // Check if the command ends with `;` indicating it's complete
        if (trimmedLine.endsWith(";")) {
          val command = commandBuffer.toString().trim
          try {
            println(s"Executing command on line $lineNumber: $command")
            statement.execute(command) // Execute the complete SQL command
            val successMsg = s"Line $lineNumber executed successfully: $command\n"
            println(successMsg)
            logBuffer.append(successMsg)
          } catch {
            case ex: Exception =>
              val errorMsg = s"Error on line $lineNumber: $command\nError Message: ${ex.getMessage}\n"
              println(errorMsg)
              logBuffer.append(errorMsg)
          }
          commandBuffer.clear() // Clear the buffer for the next command
        }
      }

      line = reader.readLine()
      lineNumber += 1
    }

    // Handle any remaining commands in the buffer (edge case for scripts without a final `;`)
    if (commandBuffer.nonEmpty) {
      val remainingCommand = commandBuffer.toString().trim
      try {
        println(s"Executing remaining command: $remainingCommand")
        statement.execute(remainingCommand)
        val successMsg = s"Remaining command executed successfully: $remainingCommand\n"
        println(successMsg)
        logBuffer.append(successMsg)
      } catch {
        case ex: Exception =>
          val errorMsg = s"Error executing remaining command: $remainingCommand\nError Message: ${ex.getMessage}\n"
          println(errorMsg)
          logBuffer.append(errorMsg)
      }
    }
  } catch {
    case ex: Exception =>
      val fatalErrorMsg = s"Fatal error occurred: ${ex.getMessage}\n"
      println(fatalErrorMsg)
      logBuffer.append(fatalErrorMsg)
  } finally {
    // Save the execution log to a file
    try {
      Files.write(Paths.get(logPath), logBuffer.toString().getBytes(StandardCharsets.UTF_8))
      println(s"Execution log saved to: $logPath")
    } catch {
      case ex: Exception =>
        println(s"Failed to write execution log: ${ex.getMessage}")
    }

    // Close resources
    if (reader != null) reader.close()
    if (statement != null) statement.close()
    if (connection != null) connection.close()
  }
}

// Example usage
val scriptPath = "path/to/your/sql_script.sql"
val jdbcUrl = "jdbc:mysql://localhost:3306/your_database"
val jdbcUser = "your_username"
val jdbcPassword = "your_password"
val jdbcDriver = "com.mysql.cj.jdbc.Driver" // Use the appropriate driver for your database

runSqlScript(scriptPath, jdbcUrl, jdbcUser, jdbcPassword, jdbcDriver)
