// Ensure both datasets have the same number of rows
if (MasterTable2DF.size != Master2CSVrows.size) {
    println(s"‚ö†Ô∏è WARNING: Record count mismatch! MasterTable2DF = ${MasterTable2DF.size}, Master2CSVrows = ${Master2CSVrows.size}")
} else {
    println(s"‚úÖ Record count matches: ${MasterTable2DF.size} rows")
}

var dataConsistent = true
val rowsToCompare = math.min(MasterTable2DF.size, Master2CSVrows.size)

for (i <- 0 until rowsToCompare) {
    val tableRow = MasterTable2DF(i)
      .replaceAll("\r", "")   // Remove hidden carriage return characters
      .split(",")             
      .map(_.trim)            // Trim leading/trailing spaces
      .map(_.replaceAll("\\s+", " ")) // Replace multiple spaces with a single space

    val csvRow = Master2CSVrows(i)
      .replaceAll("\r", "")   // Remove hidden carriage return characters
      .split(",")
      .map(_.trim)            // Trim leading/trailing spaces
      .map(_.replaceAll("\\s+", " ")) // Replace multiple spaces with a single space

    // Ensure both rows have the same number of columns
    if (tableRow.length != csvRow.length) {
        println(s"‚ùå Column count mismatch at row $i: Table has ${tableRow.length}, CSV has ${csvRow.length}")
        dataConsistent = false
    } else {
        // Compare column by column
        for (j <- tableRow.indices) {
            val tableValue = normalizeValue(tableRow(j))
            val csvValue = normalizeValue(csvRow(j))

            if (tableValue != csvValue) {
                println(s"‚ùå Mismatch at Row $i, Column $j: Table = '${tableValue}', CSV = '${csvValue}'")
                
                // Auto-fix: If it's just a format issue, update the CSV value to match the table
                if (fixableMismatch(tableValue, csvValue)) {
                    println(s"üîß Fixing Row $i, Column $j -> Updated CSV value: '$tableValue'")
                    csvRow(j) = tableValue // Update the CSV row with the corrected value
                } else {
                    dataConsistent = false
                }
            }
        }
    }
}

// Function to normalize values (trims, standardizes numbers, and ignores case)
def normalizeValue(value: String): String = {
    val numericPattern = "^[0-9]+$".r
    numericPattern.findFirstIn(value) match {
        case Some(_) => value.toLong.toString  // Convert numeric values to standard format
        case None => value.toLowerCase.trim   // Normalize text (case insensitive)
    }
}

// Function to determine if a mismatch is fixable
def fixableMismatch(tableValue: String, csvValue: String): Boolean = {
    // Fixable if difference is only in whitespace, case, or leading zeroes
    tableValue.replaceAll("\\s+", "") == csvValue.replaceAll("\\s+", "") ||
    tableValue.equalsIgnoreCase(csvValue) ||
    tableValue.replaceAll("^0+", "") == csvValue.replaceAll("^0+", "")
}

if (dataConsistent) {
    println("‚úÖ All rows and columns match between MasterTable2DF and Master2CSVrows.")
} else {
    println("‚ùå Data inconsistencies detected. Please review mismatched rows.")
}
