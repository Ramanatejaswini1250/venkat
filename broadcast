try {
    stmt_rss.getConnection.setAutoCommit(false) // Start transaction

    // Collect all alertCodes into a list
    val alertCodeList = alertCodes.map(ac => s"'$ac'").mkString(", ")

    masterTables.foreach { masterTable1 =>
        val masterTable2Index = masterTables.indexOf(masterTable1) + 1
        val masterTable2 = if (masterTable2Index < masterTables.length) masterTables(masterTable2Index) else ""

        // Step 1: Delete from MasterTable2 first (if it exists)
        if (masterTable2.nonEmpty) {
            val deleteStmt2 = s"""
                DELETE FROM $masterTable2 
                WHERE alert_id IN (
                    SELECT alert_id FROM $masterTable1 WHERE alert_code IN ($alertCodeList)
                );
            """
            println(s"Executing: $deleteStmt2")
            stmt_rss.execute(deleteStmt2)
        }

        // Step 2: Delete from MasterTable1
        val deleteStmt1 = s"DELETE FROM $masterTable1 WHERE alert_code IN ($alertCodeList);"
        println(s"Executing: $deleteStmt1")
        stmt_rss.execute(deleteStmt1)
    }

    // Commit transaction after processing all tables
    stmt_rss.getConnection.commit()
    println(s"Deletion committed for alertCodes: $alertCodeList")

} catch {
    case e: Exception =>
        println(s"Error during deletion: ${e.getMessage}")
        stmt_rss.getConnection.rollback()
} finally {
    stmt_rss.getConnection.setAutoCommit(true) // Restore default behavior
}
