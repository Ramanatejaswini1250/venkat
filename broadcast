val lock = acquireLock()

if (lock.isDefined) {
  var master_writer2: BufferedWriter = null
  try {
    // Open file in append mode
    val outputStream = Files.newOutputStream(Paths.get(csv2path), StandardOpenOption.CREATE, StandardOpenOption.APPEND)
    master_writer2 = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"))

    // Write header if file is empty
    val master2_header = "ALERT_ID,SEQUENCENUMBER,VARIABLE,HEADER"
    if (Files.size(Paths.get(csv2path)) == 0) {
      master_writer2.write(master2_header)
      master_writer2.newLine()
    }

    // Write rows
    masterTable2DF.foreach { row =>
      master_writer2.write(row)
      master_writer2.newLine()
    }
    
  } catch {
    case e: Exception => println(s"Error writing file: ${e.getMessage}")
  } finally {
    // Ensure resources are properly closed
    if (master_writer2 != null) {
      try {
        master_writer2.flush()  // Ensure all buffered data is written
        master_writer2.close()  // Close the writer
      } catch {
        case e: Exception => println(s"Error closing writer: ${e.getMessage}")
      }
    }
    
    // Release the file lock
    releaseLock(lock)
  }
} else {
  println("ðŸš¨ Another process is writing to the file. Skipping write operation.")
}
