// Mutable lists to hold alert statuses
val successAlerts = scala.collection.mutable.ListBuffer[String]()
val failureAlerts = scala.collection.mutable.ListBuffer[String]()
val allProcessedAlerts = scala.collection.mutable.ListBuffer[String]()
val missedAlerts = scala.collection.mutable.ListBuffer[String]()

// Process partition and track alert statuses
df.foreachPartition { partition =>
  partition.foreach { row =>
    val alertCode = row.getAs[String]("alert_code")
    val frequency = row.getAs[String]("frequency").toLowerCase

    // Track all processed alerts
    allProcessedAlerts += alertCode

    // Handle success and failure alerts
    if (frequency == "daily") { // Change as needed for other frequencies
      if (/* condition for successful validation */) {
        successAlerts += alertCode
      } else if (/* condition for validation failure */) {
        failureAlerts += alertCode
      }
    }
  }
}

// Step 1: Dynamically retrieve expected alerts from the DataFrame
val expectedAlertsDF = yourDataFrame
  .filter($"frequency" === "daily")
  .select("alert_code")
  .distinct()

val expectedAlertCodes = expectedAlertsDF.collect().map(_.getString(0)).toSeq

// Step 2: Identify missed alerts
missedAlerts ++= expectedAlertCodes.diff(allProcessedAlerts)

// Step 3: Consolidate and send the email
def sendConsolidatedEmail(
  successAlerts: Seq[String],
  failureAlerts: Seq[String],
  missedAlerts: Seq[String],
  date: String,
  emailAddress: String
): Unit = {
  val subject = s"Consolidated Alert Status for $date"
  val message =
    s"""
       |<h3>Consolidated Alert Status</h3>
       |<p><b>Success Alerts:</b> ${successAlerts.mkString(", ")}</p>
       |<p><b>Failure Alerts:</b> ${failureAlerts.mkString(", ")}</p>
       |<p><b>Missed Alerts:</b> ${missedAlerts.mkString(", ")}</p>
     """.stripMargin

  sendEmail(subject, message, emailAddress)
}

// Current date formatted for the email
val currentDate = LocalDate.now()
val formattedDate = currentDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))

// Send consolidated email with success, failure, and missed alerts
sendConsolidatedEmail(successAlerts, failureAlerts, missedAlerts, formattedDate, "cdao@gmail.com")
