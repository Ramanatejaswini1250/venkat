// Check if master tables exist
if (masterTables.nonEmpty) {
    val masterTable1 = masterTables.head
    val masterTable2 = if (masterTables.length > 1) masterTables(1) else ""

    try {
        // Start transaction
        stmt_rss.getConnection.setAutoCommit(false)

        // DELETE from MasterTable1 using alert_code
        val deleteStmt1 = s"DELETE FROM $masterTable1 WHERE alert_code = '$alertCode';"
        println(s"Executing: $deleteStmt1")
        stmt_rss.execute(deleteStmt1)

        // DELETE from MasterTable2 using alert_id from MasterTable1 (only if masterTable2 exists)
        if (masterTable2.nonEmpty) {
            val deleteStmt2 =
                s"DELETE FROM $masterTable2 WHERE alert_id IN " +
                s"(SELECT alert_id FROM $masterTable1 WHERE alert_code = '$alertCode');"
            println(s"Executing: $deleteStmt2")
            stmt_rss.execute(deleteStmt2)
        }

        // Commit both delete operations before CSV validation starts
        stmt_rss.getConnection.commit()
        println("Deletion successful and committed.")

    } catch {
        case e: Exception =>
            println(s"Error during deletion: ${e.getMessage}")
            stmt_rss.getConnection.rollback() // Rollback in case of failure
            throw e
    } finally {
        stmt_rss.getConnection.setAutoCommit(true) // Restore default commit behavior
    }
}

// Proceed to CSV validation after deletions
println("Starting data validation between Master Table 2 and exported Master File 2 CSV...")
