// Check if master tables exist
if (masterTables.nonEmpty) {
    try {
        // Start transaction
        stmt_rss.getConnection.setAutoCommit(false)

        masterTables.foreach { table =>
            val deleteStmt = 
                if (table == masterTables.head) {
                    // DELETE from MasterTable1 using alert_code
                    s"DELETE FROM $table WHERE alert_code = '$alertCode';"
                } else {
                    // DELETE from MasterTable2 using alert_id from MasterTable1
                    s"DELETE FROM $table WHERE alert_id IN " +
                    s"(SELECT alert_id FROM ${masterTables.head} WHERE alert_code = '$alertCode');"
                }

            println(s"Executing: $deleteStmt")
            stmt_rss.execute(deleteStmt)
        }

        // Commit both delete operations before CSV validation starts
        stmt_rss.getConnection.commit()
        println("Deletion successful and committed.")

    } catch {
        case e: Exception =>
            println(s"Error during deletion: ${e.getMessage}")
            stmt_rss.getConnection.rollback() // Rollback in case of failure
            throw e
    } finally {
        stmt_rss.getConnection.setAutoCommit(true) // Restore default commit behavior
    }
}

// Proceed to CSV validation after deletions
println("Starting data validation between Master Table 2 and exported Master File 2 CSV...")
