def runSqlScript(
    scriptPath: String,
    jdbcUrl: String,
    jdbcUser: String,
    jdbcPassword: String,
    jdbcDriver: String,
    schema: String
): Unit = {
  println(s"Running SQL script from: $scriptPath")
  val logPath = s"sql_execution_log_${getCurrentTimestamp}.txt"
  val logBuffer = new StringBuilder

  var connection: Connection = null
  var statement: Statement = null

  try {
    // Register JDBC driver
    println("Registering JDBC driver...")
    Class.forName(jdbcDriver)

    // Establish connection
    println(s"Connecting to database at: $jdbcUrl")
    connection = DriverManager.getConnection(jdbcUrl, jdbcUser, jdbcPassword)
    statement = connection.createStatement()

    // Read the SQL script
    println("Reading SQL script...")
    val script = Files.readString(Paths.get(scriptPath), StandardCharsets.UTF_8)

    // Process the script to handle inserts without columns
    println("Processing the script to handle missing columns in INSERT statements...")
    val processedScript = processInsertQueries(script, jdbcUrl, jdbcUser, jdbcPassword, jdbcDriver, schema)

    // Split processed script into individual SQL commands
    val commands = processedScript.split(";").map(_.trim).filter(_.nonEmpty)

    // Execute each command
    commands.foreach { command =>
      try {
        println(s"Executing: $command")
        statement.execute(command)
        val successMsg = s"[SUCCESS] Executed: $command"
        println(successMsg)
        logBuffer.append(successMsg + "\n")
      } catch {
        case ex: Exception =>
          val errorMsg = s"[ERROR] Failed to execute: $command\nMessage: ${ex.getMessage}"
          println(errorMsg)
          logBuffer.append(errorMsg + "\n")
      }
    }

    // Save execution log to a file
    println(s"Execution log saved to: $logPath")
    Files.write(Paths.get(logPath), logBuffer.toString().getBytes(StandardCharsets.UTF_8))

  } catch {
    case ex: Exception =>
      val fatalErrorMsg = s"[FATAL] Error: ${ex.getMessage}"
      println(fatalErrorMsg)
      logBuffer.append(fatalErrorMsg + "\n")
      Files.write(Paths.get(logPath), logBuffer.toString().getBytes(StandardCharsets.UTF_8))
  } finally {
    // Close resources
    if (statement != null) statement.close()
    if (connection != null) connection.close()
  }
}
