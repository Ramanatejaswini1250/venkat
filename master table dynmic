// Enhanced runSqlScript function
def runSqlScript(conn_rss: Connection, stmt_rss: Statement, scriptPath: String): Unit = {
  println(s"Running SQL script from: $scriptPath")

  var currentCommand: Option[String] = None // Track the current command
  var masterTable1: String = ""
  var masterTable2: String = ""

  try {
    val logBuffer = new StringBuilder
    conn_rss.setAutoCommit(false)
    stmt_rss.setQueryTimeout(30) // Set 30 seconds timeout for each query

    println("Reading SQL script...")
    val scriptContent = readFileAsString(scriptPath)

    // Remove block comments (/* ... */) from the script
    val scriptWithoutComments = removeBlockComments(scriptContent)

    // Split the script into lines and filter valid ones
    val lines = scriptWithoutComments.split("\n").toList
    var validLines = lines
      .map(_.trim)
      .filter(_.toUpperCase.contains(".IF ERRORCODE <> 0 THEN .GOTO ERROR;".toUpperCase))
      .filter(_.nonEmpty)

    // Extract master tables dynamically
    val masterTables = extractMasterTables(validLines)

    // Assign master tables for later use
    masterTable1 = masterTables.find(_.contains("MASTER_TARGET1")).getOrElse("Unknown_Master_Target1")
    masterTable2 = masterTables.find(_.contains("MASTER_TARGET2")).getOrElse("Unknown_Master_Target2")

    // Log the extracted master tables
    println(s"Extracted master tables: ${masterTables.mkString(", ")}")
    println(s"Assigned Master Table 1: $masterTable1")
    println(s"Assigned Master Table 2: $masterTable2")

    // Execute DELETE statements for master tables first
    val deleteStatements = masterTables.map(table => s"DELETE FROM $table;")

    // Ensure DELETEs are executed first, followed by valid SQL commands
    val executionOrder = deleteStatements ++ validLines

    // Execute all SQL commands
    val commands = executionOrder.mkString("\n").split(";").map(_.trim).filter(_.nonEmpty)

    // Extract and log all table names
    val tableNames = commands.map(extractTableName).distinct
    println(s"Extracted table names: ${tableNames.mkString(", ")}")

    // Begin executing commands
    commands.foreach { command =>
      currentCommand = Some(command) // Track the current command
      println(s"Executing: $command")
      stmt_rss.execute(command)
      logBuffer.append(s"Executed: $command\n")
    }

    // Commit transaction if all commands succeed
    conn_rss.commit()
    println("SQL script executed successfully.")
  } catch {
    case e: Exception =>
      e.printStackTrace()
      conn_rss.rollback()
      println(s"Rolled back due to an error while executing: ${currentCommand.getOrElse("Unknown Command")}")
      val failedTable = currentCommand.map(extractTableName).getOrElse("Unknown Table")
      println(s"Table involved in error: $failedTable")
  } finally {
    // Log completion
    println("runSqlScript function completed.")
  }(masterTable1,masterTable2)

}

// Helper function to remove block comments
def removeBlockComments(script: String): String = {
  val blockCommentRegex = "/\\*.*?\\*/".r
  blockCommentRegex.replaceAllIn(script, "")
}
