import org.apache.hadoop.conf.Configuration
import org.apache.hadoop.fs.{FileSystem, Path, FSDataInputStream}
import java.io.{File, FileOutputStream}

val conf = new Configuration()
val fs = FileSystem.get(conf)

val hdfsSourceDir = new Path("/user/hadoop/currentdatetime_Rbscc_Monday") // HDFS source
val localTargetDir = new File("/disk/output") // Local destination

// Ensure local root directory exists
if (!localTargetDir.exists()) {
    localTargetDir.mkdirs()
}

// Function to copy directories and files recursively
def copyHdfsDirToLocal(hdfsPath: Path, localPath: File): Unit = {
    if (!fs.exists(hdfsPath)) {
        println(s"Error: HDFS path does not exist: $hdfsPath")
        return
    }

    val statuses = fs.listStatus(hdfsPath)

    if (statuses.isEmpty) {
        println(s"Warning: No files found in directory: $hdfsPath")
    }

    statuses.foreach { status =>
        val hdfsSubPath = status.getPath
        val localSubPath = new File(localPath, hdfsSubPath.getName)

        if (status.isDirectory) {
            // Create local directory first
            if (!localSubPath.exists()) {
                localSubPath.mkdirs()
                println(s"Created directory: ${localSubPath.getAbsolutePath}")
            }

            // Recursively copy subdirectories
            copyHdfsDirToLocal(hdfsSubPath, localSubPath)
        } else {
            // Copy individual file
            println(s"Copying file: ${hdfsSubPath.toString} -> ${localSubPath.getAbsolutePath}")

            val hdfsInputStream: FSDataInputStream = fs.open(hdfsSubPath)
            val localOutputStream = new FileOutputStream(localSubPath)

            val buffer = new Arrayfer
            var bytesRead = hdfsInputStream.read(buffer)

            while (bytesRead > 0) {
                localOutputStream.write(buffer, 0, bytesRead)
                bytesRead = hdfsInputStream.read(buffer)
            }

            // Close streams
            hdfsInputStream.close()
            localOutputStream.close()
            println(s"File copied: ${localSubPath.getAbsolutePath}")
        }
    }
}

// Start the recursive copy
copyHdfsDirToLocal(hdfsSourceDir, localTargetDir)

// Close the filesystem
fs.close()

println(s"Completed copying from HDFS: $hdfsSourceDir to Local: $localTargetDir")
