val dateToLoad: String = frequency match {
  case "D" => currentDate.toString
  case "W" => date_to_load_week.toString
  case "M" => date_to_load_month.toString
  case _ =>
    throw new IllegalArgumentException(s"Unsupported frequency: $frequency")
}
val jdbcQuery =
  s"""
     |SELECT CAST(COUNT(*) AS BIGINT) AS cnt
     |FROM $sourceTableName
     |WHERE CAST($filterColumn AS VARCHAR(50)) = '$dateToLoad'
     |""".stripMargin




import java.time.LocalDate
import java.sql.{DriverManager, ResultSet}

val today = LocalDate.now()
val lastWeek = today.minusDays(7)
val lastMonth = today.minusDays(30)

df.foreachPartition { partition =>
  val connection = DriverManager.getConnection(jdbcUrl, user, password)

  try {
    partition.foreach { row =>
      val tableName = row.getAs[String]("sourcetable_name")
      val filterColumn = row.getAs[String]("filter_column")
      val frequency = row.getAs[String]("frequency")

      // Dynamically calculate date_to_load based on frequency
      val dateToLoad = frequency match {
        case "D" => today.toString
        case "W" => lastWeek.toString
        case "M" => lastMonth.toString
        case _ =>
          println(s"Unsupported frequency: $frequency. Skipping.")
          return
      }

      val countQuery =
        s"""
           |SELECT COUNT(*) AS record_count
           |FROM $tableName
           |WHERE $filterColumn = '$dateToLoad'
         """.stripMargin

      val statement = connection.createStatement()
      val resultSet = statement.executeQuery(countQuery)

      while (resultSet.next()) {
        val count = resultSet.getLong("record_count")
        println(s"Table: $tableName | Frequency: $frequency | Date: $dateToLoad | Count: $count")
        // Add further processing as needed
      }

      resultSet.close()
      statement.close()
    }
  } finally {
    connection.close()
  }
}
