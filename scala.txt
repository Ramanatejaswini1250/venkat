def sendConsolidatedEmail(
  successAlerts: Set[(String, Int)],
  failedAlerts: Map[String, String],
  missedAlerts: Set[String]
): Unit = {
  val emailBodyHtml =
    s"""
       |<html>
       |<body>
       |<div class="container">
       |  <p>Please find below the consolidated alert report for <strong>${LocalDate.now()}</strong>:</p>
       |
       |  <h2>Success Alerts</h2>
       |  <table>
       |    <tr class="success-header"><th>Alert Code</th><th>DT_Count</th></tr>
       |    ${
            if (successAlerts.isEmpty)
              "<tr><td colspan='2'>No successful alerts</td></tr>"
            else
              successAlerts.map { case (code, dtCount) =>
                s"<tr class='success'><td>$code</td><td>$dtCount</td></tr>"
              }.mkString("\n")
          }
       |  </table>
       |
       |  <h2>Failed Alerts</h2>
       |  <table>
       |    <tr class="failed-header"><th>Alert Code</th><th>Reason</th></tr>
       |    ${
            if (failedAlerts.isEmpty)
              "<tr><td colspan='2'>No failed alerts</td></tr>"
            else
              failedAlerts.map { case (code, reason) =>
                s"<tr class='failed'><td>$code</td><td>$reason</td></tr>"
              }.mkString("\n")
          }
       |  </table>
       |
       |  <h2>Missed Alerts</h2>
       |  <table>
       |    <tr><th>Alert Code</th></tr>
       |    ${
            if (missedAlerts.isEmpty)
              "<tr><td>No missed alerts</td></tr>"
            else
              missedAlerts.map(code => s"<tr><td>$code</td></tr>").mkString("\n")
          }
       |  </table>
       |</div>
       |</body>
       |</html>
       |""".stripMargin

  try {
    sendEmail("rbsriskalertsprogram@cba.com.au", "Ramp Automation Alert Summary", "", emailBodyHtml)
  } catch {
    case e: Exception => println(s"Failed to send success email: ${e.getMessage}")
  }
}
