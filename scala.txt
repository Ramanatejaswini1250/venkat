def waitForDailyJob(targetHour: Int = 16, targetMin: Int = 0): Unit = {
  while (true) {
    val now = System.currentTimeMillis()

    val calTarget = Calendar.getInstance(aestZone)
    calTarget.set(Calendar.HOUR_OF_DAY, targetHour)
    calTarget.set(Calendar.MINUTE, targetMin)
    calTarget.set(Calendar.SECOND, 0)
    calTarget.set(Calendar.MILLISECOND, 0)

    if (calTarget.getTimeInMillis <= now) {
      calTarget.add(Calendar.DATE, 1) // Move to the next day
    }

    val waitMillis = calTarget.getTimeInMillis - System.currentTimeMillis()
    println(s"Waiting ${waitMillis / 1000 / 60} minutes for the 4:00 PM AEST job...")

    if (waitMillis > 0) {
      Thread.sleep(waitMillis) // Sleep until next execution
    }

    // Extra safety check
    val finalCheck = Calendar.getInstance(aestZone)
    if (finalCheck.get(Calendar.HOUR_OF_DAY) == targetHour &&
        finalCheck.get(Calendar.MINUTE) >= targetMin) {
      println("Running email job at 4 PM AEST...")
      sendScheduledEmails()  // Call the email function
      println("Email job completed. Waiting for tomorrow.")
    }
  }
}
