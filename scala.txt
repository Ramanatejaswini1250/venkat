businessContactsMap.get(alertCode) match {
  case Some((business: String, emailArray: AnyRef, frequency: String)) 
       if frequencyFilter.contains(frequency) =>

   val emails = emailArray match {
      case arr: Array[String] => arr.mkString(",") // Already a Scala array
      case list: java.util.List[_] => 
        list.toArray(Array.empty[String]).mkString(",") // Convert Java List to Array[String]
      case arr if arr.getClass.isArray && arr.getClass.getComponentType == classOf[String] =>
        arr.asInstanceOf[Array[String]].mkString(",") // Handle raw Java array
      case _ => ""  // Fallback for unexpected types
    }


    val emailAddress = Option(emails).getOrElse("")  

  case Some(unexpected) =>
    throw new MatchError(s"Unexpected data format: $unexpected")  // Strict failure

  case None =>
    throw new NoSuchElementException(s"No contact found for alertCode: $alertCode")
}





import java.util.{Calendar, TimeZone}
import scala.concurrent.duration._
import scala.util.Try

object RampAutomationExecution {

  // Function to wait for a specific target time
  def waitForTargetTime(targetHour: Int, targetMin: Int, bufferMinutes: Int = 5): Boolean = {
    val aestZone = TimeZone.getTimeZone("Australia/Sydney")
    val calNow = Calendar.getInstance(aestZone)
    val currentHour = calNow.get(Calendar.HOUR_OF_DAY)
    val currentMin = calNow.get(Calendar.MINUTE)

    // Check if target time has already passed (considering buffer)
    if (currentHour > targetHour || (currentHour == targetHour && currentMin >= targetMin + bufferMinutes)) {
      println(s"Target time $targetHour:$targetMin AEST already passed. Proceeding...")
      return true
    }

    // Calculate wait time
    val now = System.currentTimeMillis()
    val calTarget = Calendar.getInstance(aestZone)
    calTarget.set(Calendar.HOUR_OF_DAY, targetHour)
    calTarget.set(Calendar.MINUTE, targetMin)
    calTarget.set(Calendar.SECOND, 0)
    calTarget.set(Calendar.MILLISECOND, 0)

    // If time has already passed, move to the next day
    if (calTarget.getTimeInMillis < now) {
      calTarget.add(Calendar.DATE, 1)
    }

    val waitMillis = calTarget.getTimeInMillis - now
    println(s"Waiting for ${(waitMillis / 1000)} seconds until $targetHour:$targetMin AEST...")
    
    Try(Thread.sleep(waitMillis)).recover {
      case _: InterruptedException => println("Sleep interrupted, proceeding...")
    }
    
    true
  }

  // Function to send individual missed alerts (4:05 PM AEST)
  def sendIndividualMissedAlerts(): Unit = {
    println("Sending individual missed alert emails...")
    // Add logic to send individual emails
  }

  // Function to send consolidated alerts (8:05 PM AEST)
  def sendConsolidatedEmail(): Unit = {
    println("Sending consolidated alert email...")
    // Add logic to send consolidated email
  }

  def main(args: Array[String]): Unit = {
    // Determine run time from Autosys trigger
    val runTimeHour = Calendar.getInstance(TimeZone.getTimeZone("Australia/Sydney")).get(Calendar.HOUR_OF_DAY)

    if (runTimeHour < 18) {  // If the job runs before 6 PM, assume it's for 4:05 PM alerts
      if (waitForTargetTime(16, 5)) {
        sendIndividualMissedAlerts()
        println("Finished 4:05 PM processing. Exiting...")
        System.exit(0)  // Stop execution after 4:05 PM emails
      }
    } else {  // If the job runs after 6 PM, assume it's for 8:05 PM alerts
      if (waitForTargetTime(20, 5)) {
        sendConsolidatedEmail()
        println("Finished 8:05 PM processing. Exiting...")
        System.exit(0)  // Stop execution after 8:05 PM emails
      }
    }
  }
}
