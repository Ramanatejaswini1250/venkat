// Function to send email notifications via a shell script with a custom message
def sendEmailNotification(alertCode: String, message: String): Unit = {
  val shellScriptPath = "/path/to/email_notification.sh"
  val process = new ProcessBuilder("bash", shellScriptPath, alertCode, message).start()
  process.waitFor()
  println(s"Email notification sent for alertCode: $alertCode with message: $message")
}

// Iterate through each record
df.collect().foreach { row =>
  val alertCode = row.getAs[String]("alert_code")
  val dtCount = row.getAs[Int]("dt_count")
  val dateToLoad = row.getAs[String]("date_to_load")
  val bteqLocation = row.getAs[String]("bteq_location")
  val sourceTableName = Option(row.getAs[String]("source_table_name"))
  val frequency = Option(row.getAs[String]("frequency"))
  val filterColumn = Option(row.getAs[String]("filter_column"))

  try {
    // Validation checks for required fields
    if (dtCount > 0) {
      if (!sourceTableName.isEmpty || !frequency.isEmpty || !filterColumn.isEmpty) {
        val message = s"One or more required columns are null for alertCode: $alertCode"
        sendEmailNotification(alertCode, message)
        throw new Exception(message)
      }

      // Run the query to count rows in the source table with the filter
      val jdbcQuery = s"(SELECT COUNT(*) AS cnt FROM ${sourceTableName.get} WHERE ${filterColumn.get} = '$dateToLoad') AS subquery"
      val sourceTableCountDF = spark.read
        .format("jdbc")
        .option("url", jdbcUrl)
        .option("dbtable", jdbcQuery)
        .option("user", jdbcUser)
        .option("password", jdbcPassword)
        .option("driver", jdbcDriver)
        .load()

      // Extract the count
      val sourceTableCount = sourceTableCountDF.collect()(0).getAs[Long]("cnt")

      // Compare counts
      if (sourceTableCount == dtCount) {
        // Construct the path to the .sql file
        val sqlFilePath = s"${bteqLocation}/${alertCode}.sql"
        
        // Execute the SQL file
        runSqlScript(sqlFilePath)

        // Execute shell script for email notification
        sendEmailNotification(alertCode, "SQL script executed successfully")
      } else {
        val message = s"Source table count ($sourceTableCount) does not match DT_COUNT ($dtCount) for alertCode: $alertCode"
        sendEmailNotification(alertCode, message)
        println(message)
      }
    } else {
      val message = s"DT_COUNT is less than or equal to 0 for alertCode: $alertCode"
      sendEmailNotification(alertCode, message)
      throw new Exception(message)
    }
  } catch {
    case ex: Exception =>
      val message = s"Error processing alertCode: $alertCode - ${ex.getMessage}"
      sendEmailNotification(alertCode, message)
      println(message)
      ex.printStackTrace()
  }
}
