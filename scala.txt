import scala.collection.JavaConverters._

if (missedAlerts.nonEmpty) {
  missedAlerts.foreach { alertCode =>
    businessContactsMap.get(alertCode) match {
      case Some((business: String, rawEmailArray: AnyRef, frequency: String)) 
        if frequencyFilter.contains(frequency) =>

          val emails = emailArray match {
      case arr if arr.getClass == classOf[Array[String]] =>
        arr.asInstanceOf[Array[String]].mkString(",")
      
      case list: java.util.List[_] if list.isEmpty || list.get(0).isInstanceOf[String] =>
        list.asScala.collect { case s: String => s }.mkString(",")
      
      case str: String => 
        str // If it's already a single email string, use as is
      
      case _ => 
        "" // Fallback for unexpected types
    }

    val emailAddress = Option(emails).getOrElse("")
     

        // ðŸ”¹ Assign cutoff time dynamically based on frequency
        val dynamicCutoffTime = frequency match {
          case "D" => "13:00 AEST" // 1:00 PM AEST for daily alerts
          case "W" | "M" => "16:00 AEST" // 4:00 PM AEST for weekly/monthly alerts
          case _ => "Unknown Cutoff"
        }

        // Further processing with emailAddress and dynamicCutoffTime
        println(s"Emails: $emailAddress, Cutoff Time: $dynamicCutoffTime")

      case _ => println(s"No valid contact info found for alertCode: $alertCode")
    }
  }
}







import java.util.{Calendar, TimeZone}
import scala.concurrent.duration._
import scala.util.Try

object RampAutomationExecution {

  // Function to wait for a specific target time
  def waitForTargetTime(targetHour: Int, targetMin: Int, bufferMinutes: Int = 5): Boolean = {
    val aestZone = TimeZone.getTimeZone("Australia/Sydney")
    val calNow = Calendar.getInstance(aestZone)
    val currentHour = calNow.get(Calendar.HOUR_OF_DAY)
    val currentMin = calNow.get(Calendar.MINUTE)

    // Check if target time has already passed (considering buffer)
    if (currentHour > targetHour || (currentHour == targetHour && currentMin >= targetMin + bufferMinutes)) {
      println(s"Target time $targetHour:$targetMin AEST already passed. Proceeding...")
      return true
    }

    // Calculate wait time
    val now = System.currentTimeMillis()
    val calTarget = Calendar.getInstance(aestZone)
    calTarget.set(Calendar.HOUR_OF_DAY, targetHour)
    calTarget.set(Calendar.MINUTE, targetMin)
    calTarget.set(Calendar.SECOND, 0)
    calTarget.set(Calendar.MILLISECOND, 0)

    // If time has already passed, move to the next day
    if (calTarget.getTimeInMillis < now) {
      calTarget.add(Calendar.DATE, 1)
    }

    val waitMillis = calTarget.getTimeInMillis - now
    println(s"Waiting for ${(waitMillis / 1000)} seconds until $targetHour:$targetMin AEST...")
    
    Try(Thread.sleep(waitMillis)).recover {
      case _: InterruptedException => println("Sleep interrupted, proceeding...")
    }
    
    true
  }

  // Function to send individual missed alerts (4:05 PM AEST)
  def sendIndividualMissedAlerts(): Unit = {
    println("Sending individual missed alert emails...")
    // Add logic to send individual emails
  }

  // Function to send consolidated alerts (8:05 PM AEST)
  def sendConsolidatedEmail(): Unit = {
    println("Sending consolidated alert email...")
    // Add logic to send consolidated email
  }

  def main(args: Array[String]): Unit = {
    // Determine run time from Autosys trigger
    val runTimeHour = Calendar.getInstance(TimeZone.getTimeZone("Australia/Sydney")).get(Calendar.HOUR_OF_DAY)

    if (runTimeHour < 18) {  // If the job runs before 6 PM, assume it's for 4:05 PM alerts
      if (waitForTargetTime(16, 5)) {
        sendIndividualMissedAlerts()
        println("Finished 4:05 PM processing. Exiting...")
        System.exit(0)  // Stop execution after 4:05 PM emails
      }
    } else {  // If the job runs after 6 PM, assume it's for 8:05 PM alerts
      if (waitForTargetTime(20, 5)) {
        sendConsolidatedEmail()
        println("Finished 8:05 PM processing. Exiting...")
        System.exit(0)  // Stop execution after 8:05 PM emails
      }
    }
  }
}
