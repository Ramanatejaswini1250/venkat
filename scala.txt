// Ensure ALERT_ID column exists
val alertIdIndex = headerColumns.indexWhere(_.equalsIgnoreCase("ALERT_ID"))

if (alertIdIndex == -1) {
    throw new Exception("ERROR: 'ALERT_ID' column not found in MasterTable2!")
}

// Read and filter rows based on ALERT_ID
var line2 = Master2_br.readLine()
while (line2 != null) {
    val columns = line2.split(",").map(_.trim) // Split and trim columns

    if (columns.length > alertIdIndex) { // Ensure index exists
        val alertId = columns(alertIdIndex)

        if (expectedAlertIds.contains(alertId)) { // Match with expected ALERT_IDs
            Master2CSVrows += line2
        }
    }
    line2 = Master2_br.readLine()
}

// Extract expected ALERT_IDs
val expectedAlertIds = Master2CSVrows.tail.map(_.split(",")(alertIdIndex).trim).toSet

Master2_br.close()
inputStream2.close()

// Compare table and CSV row by row
val masterFile2CSVcount = MasterTable2DF.size
var dataConsistent2 = true

for (i <- 0 until masterFile2CSVcount) {
    if (MasterTable2DF(i) != Master2CSVrows(i)) {
        println(s"Mismatch found at row $i: Table = ${MasterTable2DF(i)}, CSV = ${Master2CSVrows(i)}")
        dataConsistent2 = false
    }
}
