import scala.io.Source
import java.io.PrintWriter
import scala.collection.mutable.Set

// ✅ Define temp file location (local or HDFS)
val tempFilePath = "/tmp/success_alerts.txt"
val tempFailureFilePath = "/tmp/failure_alerts.txt"

// ✅ Function to Read Alerts from File
def readAlertsFromFile(filePath: String): Set[String] = {
  try {
    Source.fromFile(filePath).getLines().toSet
  } catch {
    case _: Exception => Set() // Return empty set if file not found
  }
}

// ✅ Function to Write Alerts to File
def writeAlertsToFile(filePath: String, alerts: Set[String]): Unit = {
  val writer = new PrintWriter(filePath)
  alerts.foreach(writer.println)
  writer.close()
}

// ✅ Fetch Previous Alerts from Temp File
val previousSuccessAlerts = readAlertsFromFile(tempFilePath)
val previousFailureAlerts = readAlertsFromFile(tempFailureFilePath)

// ✅ Fetch Current Run Alerts from Accumulators
val currentSuccessAlerts = succAccumulator.value.toSet
val currentFailureAlerts = failAccumulator.value.toSet

// ✅ Merge Previous & Current Alerts
val combinedSuccessAlerts = previousSuccessAlerts ++ currentSuccessAlerts
val combinedFailureAlerts = previousFailureAlerts ++ currentFailureAlerts

// ✅ Send Consolidated Email
val emailBody =
  s"""
     |<html>
     |<body>
     |<h3>Hourly Alert Processing Report</h3>
     |<p><b>Successful Alerts:</b> ${combinedSuccessAlerts.mkString(", ")}</p>
     |<p><b>Failed Alerts:</b> ${combinedFailureAlerts.mkString(", ")}</p>
     |</body>
     |</html>
   """.stripMargin

sendEmail("cdao@gmail.com", "Hourly Alert Processing Report", emailBody)

// ✅ Save Updated Alerts for Next Autosys Run
writeAlertsToFile(tempFilePath, combinedSuccessAlerts)
writeAlertsToFile(tempFailureFilePath, combinedFailureAlerts)
