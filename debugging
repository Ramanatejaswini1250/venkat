import java.nio.file.{Files, Paths}
import scala.collection.JavaConverters._

// Ensure cleanFolderPath is defined
if (cleanFolderPath != null && cleanFolderPath.nonEmpty) {
  println(s"Checking Folder at: $cleanFolderPath")

  // List all SQL files in the specified folder
  val sqlFiles = Files.list(Paths.get(cleanFolderPath))
    .iterator()
    .asScala
    .filter(path => path.toString.endsWith(".sql"))
    .toList

  println(s"Found ${sqlFiles.size} SQL files to process.")

  // Process each SQL file
  sqlFiles.foreach { filePath =>
    val cleanSqlFilePath = filePath.toString.stripSuffix(".")
    println(s"SQL FILEPATH on Driver: $cleanSqlFilePath")

    // Use SparkFiles to get the file path on the executor
    val sqlFilePath = SparkFiles.get(filePath.getFileName.toString)
    println(s"SQL FILEPATH on executor: $sqlFilePath")

    var masterTable1: String = ""
    var masterTable2: String = ""

    // Check if the file exists
    if (Files.exists(Paths.get(cleanSqlFilePath))) {
      try {
        val (table1, table2) = runSqlScript(conn_rss, stmt_rss, cleanSqlFilePath)
        masterTable1 = table1
        masterTable2 = table2
        println(s"Successfully processed SQL file: $cleanSqlFilePath")
      } catch {
        case e: Exception =>
          println(s"SQL Execution failed for file: $cleanSqlFilePath, Error: ${e.getMessage}")
          e.printStackTrace()
      }
    } else {
      println(s"File not found: $cleanSqlFilePath")
    }
  }
}
