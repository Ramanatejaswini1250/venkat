import java.util.Properties
import javax.mail._
import javax.mail.internet._
import javax.activation._

// Global variables to track failure alerts
var failureAlerts = Seq[String]()

// Method to process alert status and track failure alerts
def processAlert(alert: AlertStatus): Unit = {
  alert match {
    case Success(alertCode) =>
      // Do nothing for successful alerts
      println(s"Success alert: $alertCode - no action required.")
      
    case Failure(alertCode) =>
      // Track failure alerts
      failureAlerts = failureAlerts :+ alertCode
      println(s"Failure alert $alertCode added to failure list.")
      
    case _ =>
      println("Unknown alert status.")
  }
}

// Method to send an email using javax.mail (with multiple CCs)
def sendEmail(properties: Properties, toEmail: String, ccEmails: Seq[String], subject: String, messageText: String): Unit = {
  val host = properties.getProperty("smtp.host")
  val port = properties.getProperty("smtp.port")
  val user = properties.getProperty("smtp.user")
  val password = properties.getProperty("smtp.password")
  val from = properties.getProperty("smtp.from")

  // Set SMTP properties
  val props = new Properties()
  props.put("mail.smtp.host", host)
  props.put("mail.smtp.port", port)
  props.put("mail.smtp.auth", "true")
  props.put("mail.smtp.starttls.enable", "true") // Enable TLS

  // Create an authenticator to handle login credentials
  val authenticator = new Authenticator {
    override def getPasswordAuthentication: PasswordAuthentication = {
      new PasswordAuthentication(user, password)
    }
  }

  // Create a session with the properties and authenticator
  val session = Session.getInstance(props, authenticator)

  try {
    // Create a MimeMessage
    val message = new MimeMessage(session)
    message.setFrom(new InternetAddress(from))
    message.setRecipient(Message.RecipientType.TO, new InternetAddress(toEmail))
    
    // Add multiple CC recipients
    if (ccEmails.nonEmpty) {
      val ccAddresses = ccEmails.map(new InternetAddress(_))
      message.addRecipients(Message.RecipientType.CC, ccAddresses.mkString(","))
    }

    message.setSubject(subject)
   def sendEmail(properties: Properties, toEmail: String, ccEmails: Seq[String], subject: String, messageText: String): Unit = {
  val host = properties.getProperty("smtp.host")
  val port = properties.getProperty("smtp.port")
  val user = properties.getProperty("smtp.user")
  val password = properties.getProperty("smtp.password")
  val from = properties.getProperty("smtp.from")

  // Set SMTP properties
  val props = new Properties()
  props.put("mail.smtp.host", host)
  props.put("mail.smtp.port", port)
  props.put("mail.smtp.auth", "true")
  props.put("mail.smtp.starttls.enable", "true") // Enable TLS

  // Create an authenticator to handle login credentials
  val authenticator = new Authenticator {
    override def getPasswordAuthentication: PasswordAuthentication = {
      new PasswordAuthentication(user, password)
    }
  }

  // Create a session with the properties and authenticator
  val session = Session.getInstance(props, authenticator)

  try {
    // Create a MimeMessage
    val message = new MimeMessage(session)
    message.setFrom(new InternetAddress(from))
    message.setRecipient(Message.RecipientType.TO, new InternetAddress(toEmail))
    
    // Add multiple CC recipients
    if (ccEmails.nonEmpty) {
      val ccAddresses = ccEmails.map(new InternetAddress(_)).toArray
      message.addRecipients(Message.RecipientType.CC, ccAddresses)
    }

    // Append the footer to the message text
    val fullMessageText = 
      s"""
      |$messageText
      |
      |Thanks and Regards,
      |CDAO RAMP Team
      |""".stripMargin

    message.setSubject(subject)
    message.setContent(fullMessageText, "text/plain; charset=utf-8") // Or "text/html; charset=utf-8" for HTML emails

    // Send the email
    Transport.send(message)
    println(s"Email sent successfully to $toEmail with CCs to ${ccEmails.mkString(",")}")
  } catch {
    case e: MessagingException =>
      e.printStackTrace()
      println("Failed to send email.")
  }
}


    // Send the email
    Transport.send(message)
    println(s"Email sent successfully to $toEmail with CCs to ${ccEmails.mkString(",")}")
  } catch {
    case e: MessagingException =>
      e.printStackTrace()
      println("Failed to send email.")
  }
}

// Method to generate a dynamic subject based on the failure message
def generateSubjectBasedOnMessage(message: String, alertCode: String): String = {
  message match {
    case m if m.contains("not found")   => s"File Missing for Alert: $alertCode"
    case m if m.contains("Folder not found") => s"Folder Missing for Frequency"
    case m if m.contains("empty or null") => s"Invalid Folder Path for Frequency"
    case m if m.contains("mismatch") => s"Source Table Count Mismatch"
    case _ => s"Failure Alert: $alertCode"
  }
}

// Method to send an individual failure notification email
def sendEmailNotification(alertCode: String, message: String, toEmail: String, ccEmails: Seq[String], business: String, html: Boolean): Unit = {
  // Only track failures and send failure alerts
  if (!message.contains("successfully")) {
    failureAlerts = failureAlerts :+ alertCode
  }

  // Generate subject based on failure message
  val subject = generateSubjectBasedOnMessage(message, alertCode)

  // Send email for failure alerts
  if (!message.contains("successfully")) {
    val messageText = s"Failure Alert for $alertCode: $message"
    sendEmail(toEmail, ccEmails, subject, messageText)
  }
}

// Method to send a consolidated email with all failure alerts
def sendConsolidatedEmail(allFailures: Seq[String], currentDate: String, toEmail: String, ccEmails: Seq[String]): Unit = {
  val subject = s"Consolidated Alert Report for $currentDate"

  val message =
    s"""
      |<html>
      |<head>
      |  <style>
      |    table {
      |      width: 100%;
      |      border-collapse: collapse;
      |    }
      |    th, td {
      |      border: 1px solid black;
      |      padding: 8px;
      |      text-align: left;
      |    }
      |    th {
      |      background-color: #4CAF50;
      |      color: white;
      |    }
      |    .failure {
      |      background-color: #f8d7da;
      |      color: #721c24;
      |    }
      |  </style>
      |</head>
      |<body>
      |  <h2>Consolidated Failure Report for $currentDate</h2>
      |  <h3>Failure Alerts</h3>
      |  <table>
      |    <tr>
      |      <th>Alert</th>
      |    </tr>
      |    ${allFailures.map(alert => s"<tr class='failure'><td>$alert</td></tr>").mkString("\n")}
      |  </table>
      |</body>
      |</html>
      |""".stripMargin

  // Send consolidated failure report email
  sendEmail(toEmail, ccEmails, subject, message)
}

// Example of how these methods can be used in the application
def handleAlertsAndSendNotifications(alerts: Seq[AlertStatus], toEmail: String, ccEmails: Seq[String], business: String): Unit = {
  // Process all alerts (this could be part of your alert handling logic)
  alerts.foreach(processAlert)

  // Send individual failure notifications for each failure
  alerts.collect { case Failure(alertCode) => alertCode }.foreach { alertCode =>
    // Assuming message content is available for each failure alert
    val message = "An error occurred during the process."
    sendEmailNotification(alertCode, message, toEmail, ccEmails, business, html = true)
  }

  // Send consolidated failure email
  val currentDate = "2025-01-27"
  sendConsolidatedEmail(failureAlerts, currentDate, toEmail, ccEmails)
}

// Example main method or use case
def main(): Unit = {
  // Sample alerts
  val sampleAlerts = Seq(
    Success("ALERT_001"),
    Failure("ALERT_002"),
    Success("ALERT_003"),
    Failure("ALERT_004")
  )

  // Sample email parameters
  val toEmail = "recipient@example.com"
  val ccEmails = Seq("cc1@example.com", "cc2@example.com") // Multiple CC recipients
  val business = "BusinessUnit1"

  // Handle alerts and send email notifications
  handleAlertsAndSendNotifications(sampleAlerts, toEmail, ccEmails, business)
}
