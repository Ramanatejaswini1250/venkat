import java.util.Properties
import javax.mail._
import javax.mail.internet._
import java.io.FileInputStream

object EmailSender {

  // Function to read SMTP properties from the properties file
  def readSMTPProperties(filePath: String): Properties = {
    val properties = new Properties()
    try {
      val inputStream = new FileInputStream(filePath)
      properties.load(inputStream)
    } catch {
      case e: Exception => println(s"Error reading properties file: ${e.getMessage}")
    }
    properties
  }

  // Function to send email using the SMTP properties
  def sendEmail(properties: Properties, toEmail: String, subject: String, messageText: String): Unit = {
    val host = properties.getProperty("smtp.host")
    val port = properties.getProperty("smtp.port")
    val user = properties.getProperty("smtp.user")
    val password = properties.getProperty("smtp.password")
    val from = properties.getProperty("smtp.from")

    // Set SMTP properties
    val props = new Properties()
    props.put("mail.smtp.host", host)
    props.put("mail.smtp.port", port)
    props.put("mail.smtp.auth", "true")
    props.put("mail.smtp.starttls.enable", "true") // for TLS

class MyAuthenticator(username: String, password: String) extends Authenticator {
  override def getPasswordAuthentication: PasswordAuthentication = {
    new PasswordAuthentication(username, password)
  }
}

    try {
      // Create a MimeMessage
      val message = new MimeMessage(session)
      message.setFrom(new InternetAddress(from))
      message.setRecipient(Message.RecipientType.TO, new InternetAddress(toEmail))
      message.setSubject(subject)
      message.setText(messageText)

      // Send the message
      Transport.send(message)
      println(s"Email sent successfully to $toEmail")
    } catch {
      case e: MessagingException => e.printStackTrace()
    }
  }


  def main(args: Array[String]): Unit = {
    // Path to the properties file
    val propertiesFilePath = "conf/email_config.properties"  // Update path as necessary

    // Read properties from the file
    val smtpProperties = readSMTPProperties(propertiesFilePath)

    // Example: sending email
    val toEmail = "recipient@example.com"  // Specify the recipient email address
    val subject = smtpProperties.getProperty("smtp.subject", "Test Email from Scala")
    val messageText = "This is a test email sent using JavaMail API from Scala."

    sendEmail(smtpProperties, toEmail, subject, messageText)
  }
}


object AlertProcessor {

  // Sealed trait and case classes for success and failure
  sealed trait AlertStatus
  case class Success(alertCode: String) extends AlertStatus
  case class Failure(alertCode: String) extends AlertStatus

  // List to track success alerts
  var successAlerts: List[String] = List()

  // Function to process alert based on its status (success or failure)
  def processAlert(alert: AlertStatus): Unit = {
    alert match {
      case Success(alertCode) =>
        // Add alert code to the success list
        successAlerts = successAlerts :+ alertCode
        println(s"Alert $alertCode added to success list.")
        
      case Failure(alertCode) =>
        // Handle failure alert (you can add it to a failure list or take any other action)
        println(s"Alert $alertCode added to failure list.")
        
      case _ =>
        println("Unknown alert status.")
    }
  }

  // Main function to simulate alert processing
  def main(args: Array[String]): Unit = {
    // Simulate a list of alerts (some successes and some failures)
    val alerts = List(Success("alert001"), Failure("alert002"), Success("alert003"))

    // Process each alert and add to the appropriate list
    alerts.foreach(processAlert)

    // Print the success alerts
    println(s"Success Alerts: ${successAlerts.mkString(", ")}")
  }
}
